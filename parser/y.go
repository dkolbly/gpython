// Code generated by goyacc -v y.output grammar.y. DO NOT EDIT.

//line grammar.y:6

package parser

import __yyfmt__ "fmt"

//line grammar.y:7

// Grammar for Python

import (
	"fmt"
	"github.com/go-python/gpython/ast"
	"github.com/go-python/gpython/py"
)

// NB can put code blocks in not just at the end

// Returns a Tuple if > 1 items or a trailing comma, otherwise returns
// the first item in elts
func tupleOrExpr(pos ast.Pos, elts []ast.Expr, optional_comma bool) ast.Expr {
	if optional_comma || len(elts) > 1 {
		return &ast.Tuple{ExprBase: ast.ExprBase{Pos: pos}, Elts: elts, Ctx: ast.Load}
	} else {
		return elts[0]
	}
}

// Apply trailers (if any) to expr
//
// trailers are half made Call, Subscript or Attribute
func applyTrailers(expr ast.Expr, trailers []ast.Expr) ast.Expr {
	//trailers := $1
	for _, trailer := range trailers {
		switch x := trailer.(type) {
		case *ast.Call:
			x.Func, expr = expr, x
		case *ast.Subscript:
			x.Value, expr = expr, x
		case *ast.Attribute:
			x.Value, expr = expr, x
		default:
			panic(fmt.Sprintf("Unknown trailer type: %T", expr))
		}
	}
	return expr
}

// Set the context for expr
func setCtx(yylex yyLexer, expr ast.Expr, ctx ast.ExprContext) {
	setctxer, ok := expr.(ast.SetCtxer)
	if !ok {
		expr_name := ""
		switch expr.(type) {
		case *ast.Lambda:
			expr_name = "lambda"
		case *ast.Call:
			expr_name = "function call"
		case *ast.BoolOp, *ast.BinOp, *ast.UnaryOp:
			expr_name = "operator"
		case *ast.GeneratorExp:
			expr_name = "generator expression"
		case *ast.Yield, *ast.YieldFrom:
			expr_name = "yield expression"
		case *ast.ListComp:
			expr_name = "list comprehension"
		case *ast.SetComp:
			expr_name = "set comprehension"
		case *ast.DictComp:
			expr_name = "dict comprehension"
		case *ast.Dict, *ast.Set, *ast.Num, *ast.Str, *ast.Bytes:
			expr_name = "literal"
		case *ast.NameConstant:
			expr_name = "keyword"
		case *ast.Ellipsis:
			expr_name = "Ellipsis"
		case *ast.Compare:
			expr_name = "comparison"
		case *ast.IfExp:
			expr_name = "conditional expression"
		default:
			expr_name = fmt.Sprintf("unexpected %T", expr)
		}
		action := "assign to"
		if ctx == ast.Del {
			action = "delete"
		}
		yylex.(*yyLex).SyntaxErrorf("can't %s %s", action, expr_name)
		return
	}
	setctxer.SetCtx(ctx)
}

// Set the context for all the items in exprs
func setCtxs(yylex yyLexer, exprs []ast.Expr, ctx ast.ExprContext) {
	for i := range exprs {
		setCtx(yylex, exprs[i], ctx)
	}
}

//line grammar.y:103
type yySymType struct {
	yys            int
	pos            ast.Pos // kept up to date by the lexer
	str            string
	obj            py.Object
	mod            ast.Mod
	stmt           ast.Stmt
	stmts          []ast.Stmt
	expr           ast.Expr
	exprs          []ast.Expr
	op             ast.OperatorNumber
	cmpop          ast.CmpOp
	comma          bool
	comprehensions []ast.Comprehension
	isExpr         bool
	slice          ast.Slicer
	call           *ast.Call
	level          int
	alias          *ast.Alias
	aliases        []*ast.Alias
	identifiers    []ast.Identifier
	ifstmt         *ast.If
	lastif         *ast.If
	exchandlers    []*ast.ExceptHandler
	withitem       *ast.WithItem
	withitems      []*ast.WithItem
	matchclause    *ast.MatchClause
	matchclauses   []*ast.MatchClause
	arg            *ast.Arg
	args           []*ast.Arg
	arguments      *ast.Arguments
}

const NEWLINE = 57346
const ENDMARKER = 57347
const NAME = 57348
const INDENT = 57349
const DEDENT = 57350
const STRING = 57351
const NUMBER = 57352
const PLINGEQ = 57353
const PERCEQ = 57354
const ANDEQ = 57355
const STARSTAR = 57356
const STARSTAREQ = 57357
const STAREQ = 57358
const PLUSEQ = 57359
const MINUSEQ = 57360
const MINUSGT = 57361
const ELIPSIS = 57362
const DIVDIV = 57363
const DIVDIVEQ = 57364
const DIVEQ = 57365
const LTLT = 57366
const LTLTEQ = 57367
const LTEQ = 57368
const LTGT = 57369
const EQEQ = 57370
const GTEQ = 57371
const GTGT = 57372
const GTGTEQ = 57373
const HATEQ = 57374
const PIPEEQ = 57375
const FALSE = 57376
const NONE = 57377
const TRUE = 57378
const AND = 57379
const AS = 57380
const ASSERT = 57381
const BREAK = 57382
const CLASS = 57383
const CONTINUE = 57384
const DEF = 57385
const DEL = 57386
const ELIF = 57387
const ELSE = 57388
const EXCEPT = 57389
const FINALLY = 57390
const FOR = 57391
const FROM = 57392
const GLOBAL = 57393
const IF = 57394
const IMPORT = 57395
const IN = 57396
const IS = 57397
const LAMBDA = 57398
const NONLOCAL = 57399
const NOT = 57400
const OR = 57401
const PASS = 57402
const RAISE = 57403
const RETURN = 57404
const TRY = 57405
const WHILE = 57406
const WITH = 57407
const YIELD = 57408
const CASE = 57409
const MATCH = 57410
const SINGLE_INPUT = 57411
const FILE_INPUT = 57412
const EVAL_INPUT = 57413

var yyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"NEWLINE",
	"ENDMARKER",
	"NAME",
	"INDENT",
	"DEDENT",
	"STRING",
	"NUMBER",
	"PLINGEQ",
	"PERCEQ",
	"ANDEQ",
	"STARSTAR",
	"STARSTAREQ",
	"STAREQ",
	"PLUSEQ",
	"MINUSEQ",
	"MINUSGT",
	"ELIPSIS",
	"DIVDIV",
	"DIVDIVEQ",
	"DIVEQ",
	"LTLT",
	"LTLTEQ",
	"LTEQ",
	"LTGT",
	"EQEQ",
	"GTEQ",
	"GTGT",
	"GTGTEQ",
	"HATEQ",
	"PIPEEQ",
	"FALSE",
	"NONE",
	"TRUE",
	"AND",
	"AS",
	"ASSERT",
	"BREAK",
	"CLASS",
	"CONTINUE",
	"DEF",
	"DEL",
	"ELIF",
	"ELSE",
	"EXCEPT",
	"FINALLY",
	"FOR",
	"FROM",
	"GLOBAL",
	"IF",
	"IMPORT",
	"IN",
	"IS",
	"LAMBDA",
	"NONLOCAL",
	"NOT",
	"OR",
	"PASS",
	"RAISE",
	"RETURN",
	"TRY",
	"WHILE",
	"WITH",
	"YIELD",
	"CASE",
	"MATCH",
	"'('",
	"')'",
	"'['",
	"']'",
	"':'",
	"','",
	"';'",
	"'+'",
	"'-'",
	"'*'",
	"'/'",
	"'|'",
	"'&'",
	"'<'",
	"'>'",
	"'='",
	"'.'",
	"'%'",
	"'{'",
	"'}'",
	"'^'",
	"'~'",
	"'@'",
	"SINGLE_INPUT",
	"FILE_INPUT",
	"EVAL_INPUT",
}

var yyStatenames = [...]string{}

const yyEofCode = 1
const yyErrCode = 2
const yyInitialStackSize = 16

//line yacctab:1
var yyExca = [...]int16{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 236,
	70, 13,
	-2, 297,
	-1, 388,
	70, 91,
	-2, 298,
}

const yyPrivate = 57344

const yyLast = 1535

var yyAct = [...]int16{
	61, 228, 375, 319, 6, 99, 63, 168, 483, 374,
	163, 470, 431, 167, 326, 407, 367, 263, 381, 416,
	103, 354, 105, 227, 340, 114, 71, 347, 339, 479,
	471, 148, 323, 106, 76, 37, 77, 241, 72, 62,
	56, 113, 108, 68, 66, 59, 97, 104, 75, 109,
	140, 74, 235, 149, 153, 99, 146, 73, 18, 144,
	183, 99, 110, 192, 292, 109, 2, 3, 4, 26,
	281, 25, 136, 236, 247, 384, 251, 142, 110, 288,
	86, 266, 240, 93, 87, 51, 207, 184, 475, 247,
	182, 155, 160, 98, 89, 182, 222, 214, 213, 231,
	230, 145, 391, 182, 141, 187, 188, 157, 92, 90,
	91, 101, 151, 170, 393, 193, 194, 195, 320, 50,
	189, 190, 99, 247, 198, 283, 430, 284, 191, 199,
	202, 490, 69, 481, 467, 464, 396, 178, 169, 404,
	401, 285, 388, 83, 379, 84, 346, 217, 341, 293,
	78, 79, 176, 177, 174, 175, 154, 255, 218, 143,
	219, 85, 238, 259, 80, 256, 390, 226, 239, 200,
	203, 243, 288, 264, 265, 261, 242, 250, 245, 209,
	179, 181, 127, 128, 180, 133, 125, 123, 124, 248,
	429, 244, 134, 126, 246, 131, 295, 503, 267, 225,
	489, 132, 130, 129, 257, 258, 254, 253, 172, 173,
	345, 338, 474, 409, 423, 466, 422, 421, 300, 419,
	337, 270, 275, 276, 262, 99, 277, 278, 279, 280,
	287, 114, 169, 290, 273, 274, 272, 327, 296, 411,
	166, 271, 406, 402, 385, 301, 330, 303, 376, 369,
	333, 321, 109, 260, 135, 309, 223, 221, 111, 310,
	289, 343, 169, 291, 318, 110, 294, 348, 305, 297,
	166, 304, 308, 403, 362, 344, 243, 361, 328, 320,
	387, 242, 334, 378, 327, 355, 360, 317, 358, 286,
	452, 236, 234, 418, 363, 288, 364, 342, 473, 496,
	417, 158, 159, 269, 165, 159, 410, 268, 159, 214,
	159, 224, 252, 377, 288, 109, 351, 473, 349, 249,
	382, 383, 359, 371, 373, 372, 368, 288, 110, 162,
	137, 476, 413, 368, 165, 461, 397, 232, 161, 312,
	185, 36, 418, 398, 16, 386, 186, 320, 169, 417,
	15, 316, 320, 264, 400, 500, 482, 408, 392, 210,
	480, 498, 169, 399, 366, 307, 320, 394, 169, 117,
	443, 477, 119, 440, 424, 380, 214, 425, 120, 139,
	341, 357, 414, 335, 389, 432, 433, 142, 332, 327,
	329, 435, 436, 420, 437, 412, 299, 298, 488, 395,
	427, 138, 116, 434, 115, 355, 455, 446, 331, 428,
	448, 302, 450, 405, 451, 442, 220, 449, 100, 102,
	215, 439, 445, 7, 447, 216, 444, 441, 314, 313,
	233, 315, 164, 382, 463, 453, 415, 457, 112, 306,
	365, 336, 147, 456, 454, 458, 459, 460, 462, 150,
	152, 468, 322, 465, 438, 325, 324, 353, 352, 171,
	27, 122, 469, 196, 206, 107, 472, 208, 311, 370,
	205, 237, 70, 485, 64, 478, 82, 282, 81, 121,
	484, 442, 327, 10, 491, 17, 212, 211, 86, 118,
	494, 93, 87, 14, 501, 495, 492, 497, 487, 13,
	214, 12, 89, 484, 505, 502, 214, 425, 504, 9,
	484, 11, 506, 499, 46, 45, 92, 90, 91, 44,
	43, 49, 52, 26, 53, 25, 38, 42, 41, 40,
	35, 22, 58, 47, 19, 57, 34, 33, 67, 48,
	69, 32, 39, 55, 54, 23, 21, 24, 60, 31,
	20, 83, 86, 84, 507, 93, 87, 30, 78, 79,
	65, 29, 28, 8, 95, 96, 89, 5, 94, 85,
	1, 88, 80, 50, 0, 0, 0, 0, 0, 0,
	92, 90, 91, 0, 0, 49, 52, 26, 53, 25,
	38, 0, 0, 0, 0, 22, 58, 47, 19, 57,
	0, 0, 67, 48, 69, 0, 39, 55, 54, 23,
	21, 24, 60, 0, 20, 83, 86, 84, 426, 93,
	87, 0, 78, 79, 65, 0, 0, 0, 0, 0,
	89, 0, 0, 85, 0, 0, 80, 50, 0, 0,
	0, 0, 0, 0, 92, 90, 91, 0, 0, 49,
	52, 26, 53, 25, 38, 0, 0, 0, 0, 22,
	58, 47, 19, 57, 0, 0, 67, 48, 69, 0,
	39, 55, 54, 23, 21, 24, 60, 0, 20, 83,
	86, 84, 0, 93, 87, 0, 78, 79, 65, 0,
	0, 0, 0, 0, 89, 0, 0, 85, 0, 0,
	80, 50, 0, 0, 0, 0, 0, 0, 92, 90,
	91, 0, 0, 49, 52, 26, 53, 25, 38, 0,
	0, 0, 0, 22, 58, 47, 19, 57, 0, 0,
	67, 48, 69, 0, 39, 55, 54, 23, 21, 24,
	60, 0, 20, 83, 0, 84, 0, 0, 0, 0,
	78, 79, 65, 229, 0, 86, 0, 0, 93, 87,
	0, 85, 0, 0, 80, 50, 0, 0, 0, 89,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 92, 90, 91, 0, 0, 49, 52,
	0, 53, 0, 38, 0, 0, 0, 0, 0, 58,
	47, 0, 57, 0, 0, 67, 48, 69, 0, 39,
	55, 54, 0, 0, 0, 60, 0, 0, 83, 86,
	84, 0, 93, 87, 0, 78, 79, 65, 0, 0,
	0, 0, 0, 89, 0, 0, 85, 0, 0, 80,
	0, 0, 0, 0, 0, 0, 0, 92, 90, 91,
	0, 0, 49, 52, 0, 53, 0, 38, 86, 0,
	0, 93, 87, 58, 47, 0, 57, 0, 0, 67,
	48, 69, 89, 39, 55, 54, 0, 0, 0, 60,
	0, 0, 83, 0, 84, 0, 92, 90, 91, 78,
	79, 65, 0, 0, 0, 0, 0, 0, 0, 0,
	85, 0, 0, 80, 0, 0, 0, 0, 67, 0,
	69, 0, 0, 0, 0, 0, 0, 0, 60, 0,
	0, 83, 197, 84, 0, 0, 0, 0, 78, 79,
	65, 86, 0, 0, 93, 87, 0, 0, 0, 85,
	0, 0, 80, 0, 0, 89, 0, 0, 86, 0,
	0, 93, 87, 0, 0, 0, 0, 0, 0, 92,
	90, 91, 89, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 92, 90, 91, 0,
	0, 67, 0, 69, 0, 0, 0, 0, 0, 0,
	0, 60, 0, 0, 83, 0, 84, 0, 67, 0,
	69, 78, 79, 65, 0, 0, 0, 0, 0, 0,
	0, 83, 85, 84, 201, 80, 0, 0, 78, 79,
	65, 0, 86, 0, 0, 93, 87, 0, 0, 85,
	493, 86, 80, 0, 93, 87, 89, 0, 0, 0,
	0, 0, 0, 0, 0, 89, 0, 0, 0, 0,
	92, 90, 91, 0, 0, 0, 0, 0, 0, 92,
	90, 91, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 67, 0, 69, 0, 0, 0, 0, 0,
	0, 67, 0, 69, 0, 83, 0, 84, 0, 0,
	0, 0, 78, 79, 83, 0, 84, 0, 409, 0,
	0, 78, 79, 85, 86, 0, 80, 93, 87, 0,
	0, 0, 85, 86, 0, 80, 93, 87, 89, 0,
	0, 0, 0, 0, 0, 0, 0, 89, 0, 0,
	0, 0, 92, 90, 91, 0, 0, 0, 0, 0,
	0, 92, 90, 91, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 67, 0, 69, 0, 0, 0,
	0, 0, 0, 67, 0, 69, 0, 83, 0, 84,
	0, 356, 0, 0, 78, 79, 83, 350, 84, 0,
	0, 0, 0, 78, 79, 85, 86, 0, 80, 93,
	87, 0, 0, 0, 85, 0, 0, 80, 0, 0,
	89, 0, 0, 86, 0, 0, 93, 87, 0, 0,
	0, 0, 0, 0, 92, 90, 91, 89, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 92, 90, 91, 0, 0, 67, 0, 69, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 83,
	0, 84, 0, 67, 0, 69, 78, 79, 65, 0,
	0, 86, 0, 60, 93, 87, 83, 85, 84, 0,
	80, 0, 0, 78, 79, 89, 0, 0, 0, 0,
	0, 0, 0, 0, 85, 0, 0, 80, 0, 92,
	90, 91, 0, 0, 0, 0, 0, 0, 0, 0,
	86, 0, 0, 93, 87, 0, 0, 0, 0, 0,
	0, 67, 0, 69, 89, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 83, 0, 84, 0, 92, 90,
	91, 78, 79, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 85, 204, 156, 80, 0, 0, 0, 0,
	67, 0, 69, 0, 0, 0, 0, 0, 86, 0,
	0, 93, 87, 83, 0, 84, 0, 0, 0, 0,
	78, 79, 89, 0, 0, 86, 0, 0, 93, 87,
	0, 85, 0, 0, 80, 0, 92, 90, 91, 89,
	0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 92, 90, 91, 0, 0, 486, 0,
	69, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 83, 0, 84, 0, 67, 0, 69, 78, 79,
	0, 0, 0, 86, 0, 0, 93, 87, 83, 85,
	84, 0, 80, 0, 0, 78, 79, 89, 0, 0,
	86, 0, 0, 93, 87, 0, 85, 0, 0, 80,
	0, 92, 90, 91, 89, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 92, 90,
	91, 0, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 0, 0, 0, 83, 0, 84, 0,
	0, 0, 0, 78, 79, 65, 0, 0, 0, 0,
	0, 0, 0, 83, 85, 84, 0, 80, 0, 0,
	78, 79, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 85, 0, 0, 80,
}

var yyPact = [...]int16{
	-26, -1000, 674, -1000, 1369, -1000, -1000, 414, 36, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 1369,
	1444, 1369, 1427, 185, 1369, 398, 396, 28, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 170, 1427, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, 395, 395, 1369,
	381, 85, -1000, -1000, 1369, 1369, -1000, 381, 71, -1000,
	1294, -1000, -1000, 249, -1000, 1444, 301, 256, -1000, 74,
	126, 10, -29, 6, 316, 29, 42, -1000, 1444, 1444,
	1444, -1000, -1000, 852, 942, 1255, -1000, -1000, 350, -1000,
	-1000, -1000, -1000, -1000, -1000, 482, -1000, -1000, 73, -1000,
	-1000, 813, 412, 184, 23, 183, 257, 125, -1000, 10,
	-1000, 749, 26, -1000, 299, 223, 222, -1000, -1000, -1000,
	-1000, 1197, -2, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, 925, -1000, 117, -1000, 117,
	104, 4, -1000, 1180, -1000, -1000, 269, 103, -1000, 38,
	259, -11, 71, -1000, -1000, -1000, 1369, -1000, 74, 74,
	10, 74, 1369, 180, 101, 362, 362, -1000, -3, -1000,
	-1000, 1444, -1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000,
	253, 245, 1444, 1444, 1444, 1444, 1444, 1444, 1444, 1444,
	1444, 1444, 1444, -1000, -1000, -1000, 56, -1000, 219, 278,
	85, -1000, 278, 85, -1000, -24, 75, 123, -1000, 73,
	-1000, -1000, -1000, -1000, -1000, -1000, 392, 1369, -1000, -1000,
	-1000, 749, 407, 749, 1369, 1427, -1000, -1000, -1000, 358,
	1369, 749, 1444, 320, 273, 178, 1369, -1000, -1000, -1000,
	925, -1000, -1000, -1000, 384, 1369, 404, 382, -1000, 1369,
	381, 377, 142, -1000, -11, -1000, 251, 301, -1000, -1000,
	1369, 132, -1000, -1000, -1000, -1000, 1369, 10, -1000, -1000,
	-29, 6, 316, 29, 29, 42, 42, -1000, -1000, -1000,
	-1000, 1444, -1000, 1107, 1098, 375, -1000, 218, 1427, 216,
	205, 202, -1000, 1369, -1000, 1369, -1000, -1000, -1000, -1000,
	-1000, -1000, 357, 280, 176, -1000, 277, 674, -1000, -1000,
	10, 175, 1369, 213, -1000, 70, 360, 360, -1000, -9,
	171, 749, 210, -1000, 68, 88, -1000, 30, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, -1000, -1000, 374, 62,
	-1000, 298, 1369, -1000, -1000, 362, 362, 66, -1000, -1000,
	-1000, 173, 201, 65, -1000, 169, 1025, -1000, -1000, 252,
	-1000, -1000, -1000, 166, 278, 287, 233, -1000, 146, 749,
	144, 143, 141, 1369, 610, -1000, 749, -1000, -1000, 112,
	-1000, -1000, -1000, -1000, 1369, 1369, -1000, -1000, 1369, -1000,
	1369, 1369, -1000, 1369, 62, -1000, 374, 367, -1000, -1000,
	-1000, 356, -1000, -1000, 1098, -1000, 1025, -1000, 140, 1369,
	74, 1369, -1000, 1369, -1000, 282, -1000, 1444, 402, 749,
	280, 749, 749, 749, 297, -1000, -1000, -1000, -1000, 360,
	360, 61, -1000, -1000, -1000, -1000, -1000, -1000, 145, -1000,
	-1000, 60, -1000, 362, -1000, -1000, 140, -1000, -1000, 246,
	-1000, 139, -1000, -1000, 15, -1000, -1000, -1000, -1000, 283,
	-1000, 365, -1000, -1000, 346, 59, -1000, 342, -1000, -1000,
	-1000, -1000, -1000, 1352, 749, 394, 127, -1000, 57, -1000,
	360, 1016, 362, 265, 243, -1000, 226, -1000, 354, 749,
	341, -1000, -1000, 1369, -1000, -1000, 1352, 124, 674, -1000,
	360, -1000, -1000, 1352, 546, -1000, -1000, -1000,
}

var yyPgo = [...]int16{
	0, 571, 570, 568, 567, 565, 1, 2, 564, 563,
	9, 23, 16, 420, 58, 562, 561, 557, 549, 541,
	537, 536, 530, 529, 528, 527, 520, 519, 515, 514,
	511, 509, 501, 499, 493, 350, 344, 489, 485, 483,
	479, 42, 26, 39, 38, 57, 51, 48, 34, 36,
	478, 477, 476, 45, 0, 43, 474, 8, 473, 6,
	44, 472, 46, 35, 471, 40, 37, 470, 15, 469,
	468, 341, 33, 467, 466, 11, 465, 85, 93, 464,
	463, 461, 460, 459, 59, 30, 21, 458, 457, 14,
	456, 455, 453, 32, 52, 452, 54, 450, 53, 449,
	330, 31, 24, 442, 28, 441, 440, 439, 41, 438,
	19, 436, 13, 7, 17, 29, 3, 18, 27, 432,
	12, 431, 10, 430, 429, 428, 425, 419,
}

var yyR1 = [...]int8{
	0, 2, 2, 2, 4, 4, 3, 8, 8, 8,
	5, 126, 126, 95, 95, 94, 94, 71, 82, 82,
	37, 37, 38, 70, 70, 35, 123, 124, 124, 115,
	115, 120, 120, 121, 121, 117, 117, 125, 125, 125,
	125, 125, 125, 125, 116, 116, 112, 112, 118, 118,
	119, 119, 114, 114, 122, 122, 122, 122, 122, 122,
	122, 113, 7, 7, 127, 127, 9, 9, 6, 14,
	14, 14, 14, 14, 14, 14, 14, 15, 15, 15,
	64, 64, 66, 66, 81, 81, 77, 77, 53, 53,
	84, 84, 63, 40, 40, 40, 40, 40, 40, 40,
	40, 40, 40, 40, 40, 16, 17, 18, 18, 18,
	18, 18, 23, 24, 25, 25, 27, 26, 26, 26,
	19, 19, 28, 96, 96, 97, 97, 99, 99, 99,
	105, 105, 105, 29, 102, 102, 101, 101, 104, 104,
	103, 103, 98, 98, 100, 100, 20, 21, 78, 78,
	22, 22, 13, 13, 13, 13, 13, 13, 13, 13,
	13, 106, 106, 12, 12, 39, 111, 111, 110, 110,
	31, 30, 32, 107, 107, 33, 33, 33, 33, 109,
	109, 34, 108, 108, 69, 69, 69, 10, 10, 11,
	11, 54, 54, 54, 57, 57, 56, 56, 58, 58,
	59, 59, 60, 60, 55, 55, 61, 61, 83, 83,
	83, 83, 83, 83, 83, 83, 83, 83, 83, 43,
	42, 42, 44, 44, 45, 45, 46, 46, 46, 47,
	47, 47, 48, 48, 48, 48, 48, 49, 49, 49,
	49, 50, 50, 80, 80, 1, 1, 52, 52, 52,
	52, 52, 52, 52, 52, 52, 52, 52, 52, 52,
	52, 52, 52, 51, 51, 51, 51, 88, 88, 87,
	86, 86, 86, 86, 86, 86, 86, 86, 86, 68,
	68, 41, 41, 76, 76, 72, 62, 73, 79, 79,
	67, 67, 67, 67, 36, 90, 90, 91, 91, 92,
	92, 93, 93, 93, 93, 89, 89, 89, 75, 75,
	85, 85, 74, 74, 65, 65, 65,
}

var yyR2 = [...]int8{
	0, 2, 2, 2, 1, 2, 2, 0, 2, 2,
	3, 0, 2, 0, 1, 0, 3, 4, 1, 2,
	1, 1, 2, 0, 2, 6, 3, 0, 1, 1,
	3, 0, 3, 1, 3, 0, 1, 2, 5, 8,
	4, 3, 6, 2, 1, 3, 1, 3, 0, 3,
	1, 3, 0, 1, 2, 5, 8, 4, 3, 6,
	2, 1, 1, 1, 0, 1, 1, 3, 3, 1,
	1, 1, 1, 1, 1, 1, 1, 3, 2, 1,
	1, 1, 1, 1, 2, 3, 1, 3, 1, 1,
	0, 1, 2, 1, 1, 1, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 2, 1, 1, 1, 1,
	1, 1, 1, 1, 1, 2, 1, 1, 2, 4,
	1, 1, 2, 1, 1, 1, 2, 1, 2, 1,
	1, 4, 2, 4, 1, 3, 1, 3, 1, 3,
	1, 3, 1, 3, 1, 3, 2, 2, 1, 3,
	2, 4, 1, 1, 1, 1, 1, 1, 1, 1,
	1, 0, 5, 0, 3, 7, 1, 2, 7, 2,
	6, 5, 7, 0, 4, 4, 7, 7, 10, 1,
	3, 4, 1, 3, 1, 2, 4, 1, 2, 1,
	4, 1, 5, 1, 1, 1, 3, 4, 3, 4,
	1, 3, 1, 3, 2, 1, 1, 3, 1, 1,
	1, 1, 1, 1, 1, 1, 2, 1, 2, 2,
	1, 3, 1, 3, 1, 3, 1, 3, 3, 1,
	3, 3, 1, 3, 3, 3, 3, 2, 2, 2,
	1, 2, 4, 0, 2, 1, 2, 2, 3, 4,
	4, 2, 4, 4, 2, 3, 1, 1, 1, 1,
	1, 1, 1, 2, 3, 3, 2, 1, 3, 2,
	1, 1, 2, 2, 3, 2, 3, 3, 4, 1,
	2, 1, 1, 1, 3, 2, 2, 2, 3, 5,
	2, 4, 1, 2, 5, 1, 3, 0, 2, 0,
	3, 2, 4, 7, 3, 1, 2, 3, 1, 1,
	4, 5, 2, 3, 1, 3, 2,
}

var yyChk = [...]int16{
	-1000, -2, 92, 93, 94, -4, -6, -13, -9, -31,
	-39, -30, -32, -33, -34, -35, -36, -38, -14, 52,
	68, 64, 49, 63, 65, 43, 41, -82, -15, -16,
	-17, -18, -19, -20, -21, -22, -71, -63, 44, 60,
	-23, -24, -25, -26, -27, -28, -29, 51, 57, 39,
	91, -77, 40, 42, 62, 61, -65, 53, 50, -53,
	66, -54, -43, -59, -56, 78, -60, 56, -55, 58,
	-61, -42, -44, -45, -46, -47, -48, -49, 76, 77,
	90, -50, -52, 69, 71, 87, 6, 10, -1, 20,
	35, 36, 34, 9, -3, -8, -5, -62, -78, -54,
	4, 75, -127, -54, -42, -54, -72, -76, -41, -42,
	-43, 73, -109, -108, -54, 6, 6, -71, -37, -36,
	-35, -40, -81, 17, 18, 16, 23, 12, 13, 33,
	32, 25, 31, 15, 22, 84, -72, -100, 6, -100,
	-54, -98, 6, 74, -84, -62, -54, -103, -101, -98,
	-99, -98, -97, -96, 85, 20, 50, -62, 52, 59,
	-42, 37, 73, -122, -119, 78, 14, -112, -113, 6,
	-55, -83, 82, 83, 28, 29, 26, 27, 11, 54,
	58, 55, 80, 89, 81, 24, 30, 76, 77, 78,
	79, 86, 21, -49, -49, -49, -80, 70, -65, -53,
	-77, 72, -53, -77, 88, -67, -79, -54, -73, -78,
	9, 5, 4, -7, -6, -13, -126, 74, -84, -14,
	4, 73, 73, 73, 54, 74, -84, -11, -6, 4,
	74, 73, 38, -123, 69, -94, 69, -64, -65, -62,
	84, -66, -65, -63, 74, 74, -94, 85, -53, 50,
	74, 38, 53, -96, -98, -54, -59, -60, -55, -54,
	73, 74, -84, -114, -113, -113, 84, -42, 54, 58,
	-44, -45, -46, -47, -47, -48, -48, -49, -49, -49,
	-49, 14, -51, 69, 71, 85, 70, -85, 49, -84,
	-85, -84, 88, 74, -84, 73, -85, -84, 5, 4,
	-54, -11, 4, -11, -62, -41, -107, 7, -108, -11,
	-42, -70, 19, -124, -125, -121, 78, 14, -115, -116,
	6, 73, -95, -93, -90, -91, -89, -54, -66, 6,
	-54, 4, 6, -54, -101, 6, -105, 78, 69, -104,
	-102, 6, 46, -54, -112, 78, 14, -118, -54, -49,
	70, -93, -87, -88, -86, -54, 73, 6, 70, -72,
	70, 72, 72, -54, -54, -106, 7, -12, 46, 73,
	-69, 46, 48, 47, -10, -7, 73, -54, 70, 74,
	-84, -117, -116, -116, 84, 73, -11, 70, 74, -84,
	78, 14, -85, 84, -104, -84, 74, 38, -54, -114,
	-113, 74, 70, 72, 74, -84, 73, -68, -54, 73,
	54, 73, -85, 45, -12, -111, -110, 67, 60, 73,
	-11, 73, 73, 73, -54, -7, 8, -11, -115, 78,
	14, -120, -54, -54, -89, -54, -54, -54, -84, -102,
	6, -118, -112, 14, -86, -68, -54, -68, -54, -59,
	-54, -54, 8, -110, -42, 4, -11, -12, -11, -11,
	-11, 38, -117, -116, 74, -92, 70, 74, -113, -68,
	-75, -85, -74, 52, 73, 73, 48, 6, -120, -115,
	14, 74, 14, -57, -59, -58, 56, -11, 4, 73,
	74, -116, -89, 14, -113, -75, 73, -122, 7, -11,
	14, -54, -57, 73, -10, -116, -57, 8,
}

var yyDef = [...]int16{
	0, -2, 0, 7, 0, 1, 4, 0, 64, 152,
	153, 154, 155, 156, 157, 158, 159, 160, 66, 0,
	0, 0, 0, 0, 0, 0, 0, 0, 69, 70,
	71, 72, 73, 74, 75, 76, 18, 79, 0, 106,
	107, 108, 109, 110, 111, 120, 121, 0, 0, 0,
	0, 90, 112, 113, 114, 117, 116, 0, 0, 86,
	314, 88, 89, 191, 193, 0, 200, 0, 202, 0,
	205, 206, 220, 222, 224, 226, 229, 232, 0, 0,
	0, 240, 243, 0, 0, 0, 256, 257, 258, 259,
	260, 261, 262, 245, 2, 0, 3, 11, 90, 148,
	5, 65, 0, 0, 0, 0, 0, 90, 283, 281,
	282, 0, 0, 179, 182, 0, 15, 19, 22, 20,
	21, 0, 78, 93, 94, 95, 96, 97, 98, 99,
	100, 101, 102, 103, 104, 0, 105, 146, 144, 147,
	150, 15, 142, 91, 92, 115, 118, 122, 140, 136,
	0, 127, 129, 125, 123, 124, 0, 316, 0, 0,
	219, 0, 0, 0, 90, 52, 0, 50, 46, 61,
	204, 0, 208, 209, 210, 211, 212, 213, 214, 215,
	0, 217, 0, 0, 0, 0, 0, 0, 0, 0,
	0, 0, 0, 237, 238, 239, 241, 247, 0, 86,
	90, 251, 86, 90, 254, 0, 90, 148, 292, 90,
	246, 6, 8, 9, 62, 63, 0, 91, 286, 67,
	68, 0, 0, 0, 0, 91, 285, 173, 189, 0,
	0, 0, 0, 23, 27, 0, -2, 77, 80, 81,
	0, 84, 82, 83, 0, 0, 0, 0, 87, 0,
	0, 0, 0, 126, 128, 315, 0, 201, 203, 196,
	0, 91, 54, 48, 53, 60, 0, 207, 216, 218,
	221, 223, 225, 227, 228, 230, 231, 233, 234, 235,
	236, 0, 244, 297, 0, 0, 248, 0, 0, 0,
	0, 0, 255, 91, 290, 0, 293, 287, 10, 12,
	149, 161, 0, 163, 0, 284, 175, 0, 180, 181,
	183, 0, 0, 0, 28, 90, 35, 0, 33, 29,
	44, 0, 0, 14, 90, 0, 295, 305, 85, 145,
	151, 17, 143, 119, 141, 137, 133, 130, 0, 90,
	138, 134, 0, 197, 51, 52, 0, 58, 47, 242,
	263, 0, 0, 90, 267, 270, 271, 266, 249, 0,
	250, 252, 253, 0, 288, 163, 0, 171, 0, 0,
	0, 0, 0, 184, 0, 187, 0, 24, 26, 91,
	37, 31, 36, 43, 0, 0, 294, 16, -2, 301,
	0, 0, 306, 0, 90, 132, 91, 0, 192, 48,
	57, 0, 264, 265, 91, 269, 275, 272, 273, 279,
	0, 0, 291, 0, 170, 0, 166, 0, 0, 0,
	163, 0, 0, 0, 185, 188, 190, 25, 34, 35,
	0, 41, 30, 45, 296, 299, 304, 307, 0, 139,
	135, 55, 49, 0, 268, 276, 277, 274, 280, 310,
	289, 0, 165, 167, 0, 169, 164, 172, 174, 176,
	177, 0, 31, 40, 0, 302, 131, 0, 59, 278,
	311, 308, 309, 0, 0, 0, 0, 186, 38, 32,
	0, 0, 0, 312, 194, 195, 0, 162, 0, 0,
	0, 42, 300, 0, 56, 313, 0, 0, 0, 178,
	0, 303, 198, 0, 0, 39, 199, 168,
}

var yyTok1 = [...]int8{
	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 86, 81, 3,
	69, 70, 78, 76, 74, 77, 85, 79, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 73, 75,
	82, 84, 83, 3, 91, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 71, 3, 72, 89, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 87, 80, 88, 90,
}

var yyTok2 = [...]int8{
	2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
	12, 13, 14, 15, 16, 17, 18, 19, 20, 21,
	22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
	32, 33, 34, 35, 36, 37, 38, 39, 40, 41,
	42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
	52, 53, 54, 55, 56, 57, 58, 59, 60, 61,
	62, 63, 64, 65, 66, 67, 68, 92, 93, 94,
}

var yyTok3 = [...]int8{
	0,
}

var yyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	yyDebug        = 0
	yyErrorVerbose = false
)

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyParser interface {
	Parse(yyLexer) int
	Lookahead() int
}

type yyParserImpl struct {
	lval  yySymType
	stack [yyInitialStackSize]yySymType
	char  int
}

func (p *yyParserImpl) Lookahead() int {
	return p.char
}

func yyNewParser() yyParser {
	return &yyParserImpl{}
}

const yyFlag = -1000

func yyTokname(c int) string {
	if c >= 1 && c-1 < len(yyToknames) {
		if yyToknames[c-1] != "" {
			return yyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func yyStatname(s int) string {
	if s >= 0 && s < len(yyStatenames) {
		if yyStatenames[s] != "" {
			return yyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func yyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !yyErrorVerbose {
		return "syntax error"
	}

	for _, e := range yyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + yyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := int(yyPact[state])
	for tok := TOKSTART; tok-1 < len(yyToknames); tok++ {
		if n := base + tok; n >= 0 && n < yyLast && int(yyChk[int(yyAct[n])]) == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if yyDef[state] == -2 {
		i := 0
		for yyExca[i] != -1 || int(yyExca[i+1]) != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; yyExca[i] >= 0; i += 2 {
			tok := int(yyExca[i])
			if tok < TOKSTART || yyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if yyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += yyTokname(tok)
	}
	return res
}

func yylex1(lex yyLexer, lval *yySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = int(yyTok1[0])
		goto out
	}
	if char < len(yyTok1) {
		token = int(yyTok1[char])
		goto out
	}
	if char >= yyPrivate {
		if char < yyPrivate+len(yyTok2) {
			token = int(yyTok2[char-yyPrivate])
			goto out
		}
	}
	for i := 0; i < len(yyTok3); i += 2 {
		token = int(yyTok3[i+0])
		if token == char {
			token = int(yyTok3[i+1])
			goto out
		}
	}

out:
	if token == 0 {
		token = int(yyTok2[1]) /* unknown char */
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", yyTokname(token), uint(char))
	}
	return char, token
}

func yyParse(yylex yyLexer) int {
	return yyNewParser().Parse(yylex)
}

func (yyrcvr *yyParserImpl) Parse(yylex yyLexer) int {
	var yyn int
	var yyVAL yySymType
	var yyDollar []yySymType
	_ = yyDollar // silence set and not used
	yyS := yyrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yystate := 0
	yyrcvr.char = -1
	yytoken := -1 // yyrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		yystate = -1
		yyrcvr.char = -1
		yytoken = -1
	}()
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	if yyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", yyTokname(yytoken), yyStatname(yystate))
	}

	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	yyn = int(yyPact[yystate])
	if yyn <= yyFlag {
		goto yydefault /* simple state */
	}
	if yyrcvr.char < 0 {
		yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
	}
	yyn += yytoken
	if yyn < 0 || yyn >= yyLast {
		goto yydefault
	}
	yyn = int(yyAct[yyn])
	if int(yyChk[yyn]) == yytoken { /* valid shift */
		yyrcvr.char = -1
		yytoken = -1
		yyVAL = yyrcvr.lval
		yystate = yyn
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	}

yydefault:
	/* default state action */
	yyn = int(yyDef[yystate])
	if yyn == -2 {
		if yyrcvr.char < 0 {
			yyrcvr.char, yytoken = yylex1(yylex, &yyrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if yyExca[xi+0] == -1 && int(yyExca[xi+1]) == yystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			yyn = int(yyExca[xi+0])
			if yyn < 0 || yyn == yytoken {
				break
			}
		}
		yyn = int(yyExca[xi+1])
		if yyn < 0 {
			goto ret0
		}
	}
	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			yylex.Error(yyErrorMessage(yystate, yytoken))
			Nerrs++
			if yyDebug >= 1 {
				__yyfmt__.Printf("%s", yyStatname(yystate))
				__yyfmt__.Printf(" saw %s\n", yyTokname(yytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				yyn = int(yyPact[yyS[yyp].yys]) + yyErrCode
				if yyn >= 0 && yyn < yyLast {
					yystate = int(yyAct[yyn]) /* simulate a shift of "error" */
					if int(yyChk[yystate]) == yyErrCode {
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yyTokname(yytoken))
			}
			if yytoken == yyEofCode {
				goto ret1
			}
			yyrcvr.char = -1
			yytoken = -1
			goto yynewstate /* try again in the same state */
		}
	}

	/* reduction by production yyn */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", yyn, yyStatname(yystate))
	}

	yynt := yyn
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= int(yyR2[yyn])
	// yyp is now the index of $0. Perform the default action. Iff the
	// reduced production is ε, $1 is possibly out of range.
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	yyn = int(yyR1[yyn])
	yyg := int(yyPgo[yyn])
	yyj := yyg + yyS[yyp].yys + 1

	if yyj >= yyLast {
		yystate = int(yyAct[yyg])
	} else {
		yystate = int(yyAct[yyj])
		if int(yyChk[yystate]) != -yyn {
			yystate = int(yyAct[yyg])
		}
	}
	// dummy call; replaced with literal code
	switch yynt {

	case 1:
		yyDollar = yyS[yypt-2 : yypt+1]
//line grammar.y:256
		{
			yylex.(*yyLex).mod = yyDollar[2].mod
			return 0
		}
	case 2:
		yyDollar = yyS[yypt-2 : yypt+1]
//line grammar.y:261
		{
			yylex.(*yyLex).mod = yyDollar[2].mod
			return 0
		}
	case 3:
		yyDollar = yyS[yypt-2 : yypt+1]
//line grammar.y:266
		{
			yylex.(*yyLex).mod = yyDollar[2].mod
			return 0
		}
	case 4:
		yyDollar = yyS[yypt-1 : yypt+1]
//line grammar.y:280
		{
			yyVAL.mod = &ast.Interactive{ModBase: ast.ModBase{Pos: yyVAL.pos}, Body: yyDollar[1].stmts}
		}
	case 5:
		yyDollar = yyS[yypt-2 : yypt+1]
//line grammar.y:284
		{
			//  NB: compound_stmt in single_input is followed by extra NEWLINE!
			yyVAL.mod = &ast.Interactive{ModBase: ast.ModBase{Pos: yyVAL.pos}, Body: []ast.Stmt{yyDollar[1].stmt}}
		}
	case 6:
		yyDollar = yyS[yypt-2 : yypt+1]
//line grammar.y:292
		{
			yyVAL.mod = &ast.Module{ModBase: ast.ModBase{Pos: yyVAL.pos}, Body: yyDollar[1].stmts}
		}
	case 7:
		yyDollar = yyS[yypt-0 : yypt+1]
//line grammar.y:298
		{
			yyVAL.stmts = nil
		}
	case 8:
		yyDollar = yyS[yypt-2 : yypt+1]
//line grammar.y:302
		{
		}
	case 9:
		yyDollar = yyS[yypt-2 : yypt+1]
//line grammar.y:305
		{
			yyVAL.stmts = append(yyVAL.stmts, yyDollar[2].stmts...)
		}
	case 10:
		yyDollar = yyS[yypt-3 : yypt+1]
//line grammar.y:312
		{
			yyVAL.mod = &ast.Expression{ModBase: ast.ModBase{Pos: yyVAL.pos}, Body: yyDollar[1].expr}
		}
	case 13:
		yyDollar = yyS[yypt-0 : yypt+1]
//line grammar.y:321
		{
			yyVAL.call = &ast.Call{ExprBase: ast.ExprBase{Pos: yyVAL.pos}}
		}
	case 14:
		yyDollar = yyS[yypt-1 : yypt+1]
//line grammar.y:325
		{
			yyVAL.call = yyDollar[1].call
		}
	case 15:
		yyDollar = yyS[yypt-0 : yypt+1]
//line grammar.y:330
		{
			yyVAL.call = nil
		}
	case 16:
		yyDollar = yyS[yypt-3 : yypt+1]
//line grammar.y:334
		{
			yyVAL.call = yyDollar[2].call
		}
	case 17:
		yyDollar = yyS[yypt-4 : yypt+1]
//line grammar.y:340
		{
			fn := &ast.Name{ExprBase: ast.ExprBase{Pos: yyVAL.pos}, Id: ast.Identifier(yyDollar[2].str), Ctx: ast.Load}
			if yyDollar[3].call == nil {
				yyVAL.expr = fn
			} else {
				call := *yyDollar[3].call
				call.Func = fn
				yyVAL.expr = &call
			}
		}
	case 18:
		yyDollar = yyS[yypt-1 : yypt+1]
//line grammar.y:353
		{
			yyVAL.exprs = nil
			yyVAL.exprs = append(yyVAL.exprs, yyDollar[1].expr)
		}
	case 19:
		yyDollar = yyS[yypt-2 : yypt+1]
//line grammar.y:358
		{
			yyVAL.exprs = append(yyVAL.exprs, yyDollar[2].expr)
		}
	case 20:
		yyDollar = yyS[yypt-1 : yypt+1]
//line grammar.y:364
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 21:
		yyDollar = yyS[yypt-1 : yypt+1]
//line grammar.y:368
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 22:
		yyDollar = yyS[yypt-2 : yypt+1]
//line grammar.y:374
		{
			switch x := (yyDollar[2].stmt).(type) {
			case *ast.ClassDef:
				x.DecoratorList = yyDollar[1].exprs
				yyVAL.stmt = x
			case *ast.FunctionDef:
				x.DecoratorList = yyDollar[1].exprs
				yyVAL.stmt = x
			default:
				panic("bad type for decorated")
			}
		}
	case 23:
		yyDollar = yyS[yypt-0 : yypt+1]
//line grammar.y:388
		{
			yyVAL.expr = nil
		}
	case 24:
		yyDollar = yyS[yypt-2 : yypt+1]
//line grammar.y:392
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 25:
		yyDollar = yyS[yypt-6 : yypt+1]
//line grammar.y:398
		{
			yyVAL.stmt = &ast.FunctionDef{StmtBase: ast.StmtBase{Pos: yyVAL.pos}, Name: ast.Identifier(yyDollar[2].str), Args: yyDollar[3].arguments, Body: yyDollar[6].stmts, Returns: yyDollar[4].expr}
		}
	case 26:
		yyDollar = yyS[yypt-3 : yypt+1]
//line grammar.y:404
		{
			yyVAL.arguments = yyDollar[2].arguments
		}
	case 27:
		yyDollar = yyS[yypt-0 : yypt+1]
//line grammar.y:409
		{
			yyVAL.arguments = &ast.Arguments{Pos: yyVAL.pos}
		}
	case 28:
		yyDollar = yyS[yypt-1 : yypt+1]
//line grammar.y:413
		{
			yyVAL.arguments = yyDollar[1].arguments
		}
	case 29:
		yyDollar = yyS[yypt-1 : yypt+1]
//line grammar.y:420
		{
			yyVAL.arg = yyDollar[1].arg
			yyVAL.expr = nil
		}
	case 30:
		yyDollar = yyS[yypt-3 : yypt+1]
//line grammar.y:425
		{
			yyVAL.arg = yyDollar[1].arg
			yyVAL.expr = yyDollar[3].expr
		}
	case 31:
		yyDollar = yyS[yypt-0 : yypt+1]
//line grammar.y:431
		{
			yyVAL.args = nil
			yyVAL.exprs = nil
		}
	case 32:
		yyDollar = yyS[yypt-3 : yypt+1]
//line grammar.y:436
		{
			yyVAL.args = append(yyVAL.args, yyDollar[3].arg)
			if yyDollar[3].expr != nil {
				yyVAL.exprs = append(yyVAL.exprs, yyDollar[3].expr)
			}
		}
	case 33:
		yyDollar = yyS[yypt-1 : yypt+1]
//line grammar.y:445
		{
			yyVAL.args = nil
			yyVAL.args = append(yyVAL.args, yyDollar[1].arg)
			yyVAL.exprs = nil
			if yyDollar[1].expr != nil {
				yyVAL.exprs = append(yyVAL.exprs, yyDollar[1].expr)
			}
		}
	case 34:
		yyDollar = yyS[yypt-3 : yypt+1]
//line grammar.y:454
		{
			yyVAL.args = append(yyVAL.args, yyDollar[3].arg)
			if yyDollar[3].expr != nil {
				yyVAL.exprs = append(yyVAL.exprs, yyDollar[3].expr)
			}
		}
	case 35:
		yyDollar = yyS[yypt-0 : yypt+1]
//line grammar.y:462
		{
			yyVAL.arg = nil
		}
	case 36:
		yyDollar = yyS[yypt-1 : yypt+1]
//line grammar.y:466
		{
			yyVAL.arg = yyDollar[1].arg
		}
	case 37:
		yyDollar = yyS[yypt-2 : yypt+1]
//line grammar.y:473
		{
			yyVAL.arguments = &ast.Arguments{Pos: yyVAL.pos, Args: yyDollar[1].args, Defaults: yyDollar[1].exprs}
		}
	case 38:
		yyDollar = yyS[yypt-5 : yypt+1]
//line grammar.y:477
		{
			yyVAL.arguments = &ast.Arguments{Pos: yyVAL.pos, Args: yyDollar[1].args, Defaults: yyDollar[1].exprs, Vararg: yyDollar[4].arg, Kwonlyargs: yyDollar[5].args, KwDefaults: yyDollar[5].exprs}
		}
	case 39:
		yyDollar = yyS[yypt-8 : yypt+1]
//line grammar.y:481
		{
			yyVAL.arguments = &ast.Arguments{Pos: yyVAL.pos, Args: yyDollar[1].args, Defaults: yyDollar[1].exprs, Vararg: yyDollar[4].arg, Kwonlyargs: yyDollar[5].args, KwDefaults: yyDollar[5].exprs, Kwarg: yyDollar[8].arg}
		}
	case 40:
		yyDollar = yyS[yypt-4 : yypt+1]
//line grammar.y:485
		{
			yyVAL.arguments = &ast.Arguments{Pos: yyVAL.pos, Args: yyDollar[1].args, Defaults: yyDollar[1].exprs, Kwarg: yyDollar[4].arg}
		}
	case 41:
		yyDollar = yyS[yypt-3 : yypt+1]
//line grammar.y:489
		{
			yyVAL.arguments = &ast.Arguments{Pos: yyVAL.pos, Vararg: yyDollar[2].arg, Kwonlyargs: yyDollar[3].args, KwDefaults: yyDollar[3].exprs}
		}
	case 42:
		yyDollar = yyS[yypt-6 : yypt+1]
//line grammar.y:493
		{
			yyVAL.arguments = &ast.Arguments{Pos: yyVAL.pos, Vararg: yyDollar[2].arg, Kwonlyargs: yyDollar[3].args, KwDefaults: yyDollar[3].exprs, Kwarg: yyDollar[6].arg}
		}
	case 43:
		yyDollar = yyS[yypt-2 : yypt+1]
//line grammar.y:497
		{
			yyVAL.arguments = &ast.Arguments{Pos: yyVAL.pos, Kwarg: yyDollar[2].arg}
		}
	case 44:
		yyDollar = yyS[yypt-1 : yypt+1]
//line grammar.y:503
		{
			yyVAL.arg = &ast.Arg{Pos: yyVAL.pos, Arg: ast.Identifier(yyDollar[1].str)}
		}
	case 45:
		yyDollar = yyS[yypt-3 : yypt+1]
//line grammar.y:507
		{
			yyVAL.arg = &ast.Arg{Pos: yyVAL.pos, Arg: ast.Identifier(yyDollar[1].str), Annotation: yyDollar[3].expr}
		}
	case 46:
		yyDollar = yyS[yypt-1 : yypt+1]
//line grammar.y:513
		{
			yyVAL.arg = yyDollar[1].arg
			yyVAL.expr = nil
		}
	case 47:
		yyDollar = yyS[yypt-3 : yypt+1]
//line grammar.y:518
		{
			yyVAL.arg = yyDollar[1].arg
			yyVAL.expr = yyDollar[3].expr
		}
	case 48:
		yyDollar = yyS[yypt-0 : yypt+1]
//line grammar.y:524
		{
			yyVAL.args = nil
			yyVAL.exprs = nil
		}
	case 49:
		yyDollar = yyS[yypt-3 : yypt+1]
//line grammar.y:529
		{
			yyVAL.args = append(yyVAL.args, yyDollar[3].arg)
			if yyDollar[3].expr != nil {
				yyVAL.exprs = append(yyVAL.exprs, yyDollar[3].expr)
			}
		}
	case 50:
		yyDollar = yyS[yypt-1 : yypt+1]
//line grammar.y:538
		{
			yyVAL.args = nil
			yyVAL.args = append(yyVAL.args, yyDollar[1].arg)
			yyVAL.exprs = nil
			if yyDollar[1].expr != nil {
				yyVAL.exprs = append(yyVAL.exprs, yyDollar[1].expr)
			}
		}
	case 51:
		yyDollar = yyS[yypt-3 : yypt+1]
//line grammar.y:547
		{
			yyVAL.args = append(yyVAL.args, yyDollar[3].arg)
			if yyDollar[3].expr != nil {
				yyVAL.exprs = append(yyVAL.exprs, yyDollar[3].expr)
			}
		}
	case 52:
		yyDollar = yyS[yypt-0 : yypt+1]
//line grammar.y:555
		{
			yyVAL.arg = nil
		}
	case 53:
		yyDollar = yyS[yypt-1 : yypt+1]
//line grammar.y:559
		{
			yyVAL.arg = yyDollar[1].arg
		}
	case 54:
		yyDollar = yyS[yypt-2 : yypt+1]
//line grammar.y:566
		{
			yyVAL.arguments = &ast.Arguments{Pos: yyVAL.pos, Args: yyDollar[1].args, Defaults: yyDollar[1].exprs}
		}
	case 55:
		yyDollar = yyS[yypt-5 : yypt+1]
//line grammar.y:570
		{
			yyVAL.arguments = &ast.Arguments{Pos: yyVAL.pos, Args: yyDollar[1].args, Defaults: yyDollar[1].exprs, Vararg: yyDollar[4].arg, Kwonlyargs: yyDollar[5].args, KwDefaults: yyDollar[5].exprs}
		}
	case 56:
		yyDollar = yyS[yypt-8 : yypt+1]
//line grammar.y:574
		{
			yyVAL.arguments = &ast.Arguments{Pos: yyVAL.pos, Args: yyDollar[1].args, Defaults: yyDollar[1].exprs, Vararg: yyDollar[4].arg, Kwonlyargs: yyDollar[5].args, KwDefaults: yyDollar[5].exprs, Kwarg: yyDollar[8].arg}
		}
	case 57:
		yyDollar = yyS[yypt-4 : yypt+1]
//line grammar.y:578
		{
			yyVAL.arguments = &ast.Arguments{Pos: yyVAL.pos, Args: yyDollar[1].args, Defaults: yyDollar[1].exprs, Kwarg: yyDollar[4].arg}
		}
	case 58:
		yyDollar = yyS[yypt-3 : yypt+1]
//line grammar.y:582
		{
			yyVAL.arguments = &ast.Arguments{Pos: yyVAL.pos, Vararg: yyDollar[2].arg, Kwonlyargs: yyDollar[3].args, KwDefaults: yyDollar[3].exprs}
		}
	case 59:
		yyDollar = yyS[yypt-6 : yypt+1]
//line grammar.y:586
		{
			yyVAL.arguments = &ast.Arguments{Pos: yyVAL.pos, Vararg: yyDollar[2].arg, Kwonlyargs: yyDollar[3].args, KwDefaults: yyDollar[3].exprs, Kwarg: yyDollar[6].arg}
		}
	case 60:
		yyDollar = yyS[yypt-2 : yypt+1]
//line grammar.y:590
		{
			yyVAL.arguments = &ast.Arguments{Pos: yyVAL.pos, Kwarg: yyDollar[2].arg}
		}
	case 61:
		yyDollar = yyS[yypt-1 : yypt+1]
//line grammar.y:596
		{
			yyVAL.arg = &ast.Arg{Pos: yyVAL.pos, Arg: ast.Identifier(yyDollar[1].str)}
		}
	case 62:
		yyDollar = yyS[yypt-1 : yypt+1]
//line grammar.y:602
		{
			yyVAL.stmts = yyDollar[1].stmts
		}
	case 63:
		yyDollar = yyS[yypt-1 : yypt+1]
//line grammar.y:606
		{
			yyVAL.stmts = []ast.Stmt{yyDollar[1].stmt}
		}
	case 66:
		yyDollar = yyS[yypt-1 : yypt+1]
//line grammar.y:614
		{
			yyVAL.stmts = nil
			yyVAL.stmts = append(yyVAL.stmts, yyDollar[1].stmt)
		}
	case 67:
		yyDollar = yyS[yypt-3 : yypt+1]
//line grammar.y:619
		{
			yyVAL.stmts = append(yyVAL.stmts, yyDollar[3].stmt)
		}
	case 68:
		yyDollar = yyS[yypt-3 : yypt+1]
//line grammar.y:625
		{
			yyVAL.stmts = yyDollar[1].stmts
		}
	case 69:
		yyDollar = yyS[yypt-1 : yypt+1]
//line grammar.y:631
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 70:
		yyDollar = yyS[yypt-1 : yypt+1]
//line grammar.y:635
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 71:
		yyDollar = yyS[yypt-1 : yypt+1]
//line grammar.y:639
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 72:
		yyDollar = yyS[yypt-1 : yypt+1]
//line grammar.y:643
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 73:
		yyDollar = yyS[yypt-1 : yypt+1]
//line grammar.y:647
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 74:
		yyDollar = yyS[yypt-1 : yypt+1]
//line grammar.y:651
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 75:
		yyDollar = yyS[yypt-1 : yypt+1]
//line grammar.y:655
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 76:
		yyDollar = yyS[yypt-1 : yypt+1]
//line grammar.y:659
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 77:
		yyDollar = yyS[yypt-3 : yypt+1]
//line grammar.y:686
		{
			target := yyDollar[1].expr
			setCtx(yylex, target, ast.Store)
			yyVAL.stmt = &ast.AugAssign{StmtBase: ast.StmtBase{Pos: yyVAL.pos}, Target: target, Op: yyDollar[2].op, Value: yyDollar[3].expr}
		}
	case 78:
		yyDollar = yyS[yypt-2 : yypt+1]
//line grammar.y:692
		{
			targets := []ast.Expr{yyDollar[1].expr}
			targets = append(targets, yyDollar[2].exprs...)
			value := targets[len(targets)-1]
			targets = targets[:len(targets)-1]
			setCtxs(yylex, targets, ast.Store)
			yyVAL.stmt = &ast.Assign{StmtBase: ast.StmtBase{Pos: yyVAL.pos}, Targets: targets, Value: value}
		}
	case 79:
		yyDollar = yyS[yypt-1 : yypt+1]
//line grammar.y:701
		{
			yyVAL.stmt = &ast.ExprStmt{StmtBase: ast.StmtBase{Pos: yyVAL.pos}, Value: yyDollar[1].expr}
		}
	case 80:
		yyDollar = yyS[yypt-1 : yypt+1]
//line grammar.y:707
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 81:
		yyDollar = yyS[yypt-1 : yypt+1]
//line grammar.y:711
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 82:
		yyDollar = yyS[yypt-1 : yypt+1]
//line grammar.y:717
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 83:
		yyDollar = yyS[yypt-1 : yypt+1]
//line grammar.y:721
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 84:
		yyDollar = yyS[yypt-2 : yypt+1]
//line grammar.y:727
		{
			yyVAL.exprs = nil
			yyVAL.exprs = append(yyVAL.exprs, yyDollar[2].expr)
		}
	case 85:
		yyDollar = yyS[yypt-3 : yypt+1]
//line grammar.y:732
		{
			yyVAL.exprs = append(yyVAL.exprs, yyDollar[3].expr)
		}
	case 86:
		yyDollar = yyS[yypt-1 : yypt+1]
//line grammar.y:738
		{
			yyVAL.exprs = nil
			yyVAL.exprs = append(yyVAL.exprs, yyDollar[1].expr)
		}
	case 87:
		yyDollar = yyS[yypt-3 : yypt+1]
//line grammar.y:743
		{
			yyVAL.exprs = append(yyVAL.exprs, yyDollar[3].expr)
		}
	case 88:
		yyDollar = yyS[yypt-1 : yypt+1]
//line grammar.y:749
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 89:
		yyDollar = yyS[yypt-1 : yypt+1]
//line grammar.y:753
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 90:
		yyDollar = yyS[yypt-0 : yypt+1]
//line grammar.y:758
		{
			yyVAL.comma = false
		}
	case 91:
		yyDollar = yyS[yypt-1 : yypt+1]
//line grammar.y:762
		{
			yyVAL.comma = true
		}
	case 92:
		yyDollar = yyS[yypt-2 : yypt+1]
//line grammar.y:768
		{
			yyVAL.expr = tupleOrExpr(yyVAL.pos, yyDollar[1].exprs, yyDollar[2].comma)
		}
	case 93:
		yyDollar = yyS[yypt-1 : yypt+1]
//line grammar.y:774
		{
			yyVAL.op = ast.Add
		}
	case 94:
		yyDollar = yyS[yypt-1 : yypt+1]
//line grammar.y:778
		{
			yyVAL.op = ast.Sub
		}
	case 95:
		yyDollar = yyS[yypt-1 : yypt+1]
//line grammar.y:782
		{
			yyVAL.op = ast.Mult
		}
	case 96:
		yyDollar = yyS[yypt-1 : yypt+1]
//line grammar.y:786
		{
			yyVAL.op = ast.Div
		}
	case 97:
		yyDollar = yyS[yypt-1 : yypt+1]
//line grammar.y:790
		{
			yyVAL.op = ast.Modulo
		}
	case 98:
		yyDollar = yyS[yypt-1 : yypt+1]
//line grammar.y:794
		{
			yyVAL.op = ast.BitAnd
		}
	case 99:
		yyDollar = yyS[yypt-1 : yypt+1]
//line grammar.y:798
		{
			yyVAL.op = ast.BitOr
		}
	case 100:
		yyDollar = yyS[yypt-1 : yypt+1]
//line grammar.y:802
		{
			yyVAL.op = ast.BitXor
		}
	case 101:
		yyDollar = yyS[yypt-1 : yypt+1]
//line grammar.y:806
		{
			yyVAL.op = ast.LShift
		}
	case 102:
		yyDollar = yyS[yypt-1 : yypt+1]
//line grammar.y:810
		{
			yyVAL.op = ast.RShift
		}
	case 103:
		yyDollar = yyS[yypt-1 : yypt+1]
//line grammar.y:814
		{
			yyVAL.op = ast.Pow
		}
	case 104:
		yyDollar = yyS[yypt-1 : yypt+1]
//line grammar.y:818
		{
			yyVAL.op = ast.FloorDiv
		}
	case 105:
		yyDollar = yyS[yypt-2 : yypt+1]
//line grammar.y:825
		{
			setCtxs(yylex, yyDollar[2].exprs, ast.Del)
			yyVAL.stmt = &ast.Delete{StmtBase: ast.StmtBase{Pos: yyVAL.pos}, Targets: yyDollar[2].exprs}
		}
	case 106:
		yyDollar = yyS[yypt-1 : yypt+1]
//line grammar.y:832
		{
			yyVAL.stmt = &ast.Pass{StmtBase: ast.StmtBase{Pos: yyVAL.pos}}
		}
	case 107:
		yyDollar = yyS[yypt-1 : yypt+1]
//line grammar.y:838
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 108:
		yyDollar = yyS[yypt-1 : yypt+1]
//line grammar.y:842
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 109:
		yyDollar = yyS[yypt-1 : yypt+1]
//line grammar.y:846
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 110:
		yyDollar = yyS[yypt-1 : yypt+1]
//line grammar.y:850
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 111:
		yyDollar = yyS[yypt-1 : yypt+1]
//line grammar.y:854
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 112:
		yyDollar = yyS[yypt-1 : yypt+1]
//line grammar.y:860
		{
			yyVAL.stmt = &ast.Break{StmtBase: ast.StmtBase{Pos: yyVAL.pos}}
		}
	case 113:
		yyDollar = yyS[yypt-1 : yypt+1]
//line grammar.y:866
		{
			yyVAL.stmt = &ast.Continue{StmtBase: ast.StmtBase{Pos: yyVAL.pos}}
		}
	case 114:
		yyDollar = yyS[yypt-1 : yypt+1]
//line grammar.y:872
		{
			yyVAL.stmt = &ast.Return{StmtBase: ast.StmtBase{Pos: yyVAL.pos}}
		}
	case 115:
		yyDollar = yyS[yypt-2 : yypt+1]
//line grammar.y:876
		{
			yyVAL.stmt = &ast.Return{StmtBase: ast.StmtBase{Pos: yyVAL.pos}, Value: yyDollar[2].expr}
		}
	case 116:
		yyDollar = yyS[yypt-1 : yypt+1]
//line grammar.y:882
		{
			yyVAL.stmt = &ast.ExprStmt{StmtBase: ast.StmtBase{Pos: yyVAL.pos}, Value: yyDollar[1].expr}
		}
	case 117:
		yyDollar = yyS[yypt-1 : yypt+1]
//line grammar.y:888
		{
			yyVAL.stmt = &ast.Raise{StmtBase: ast.StmtBase{Pos: yyVAL.pos}}
		}
	case 118:
		yyDollar = yyS[yypt-2 : yypt+1]
//line grammar.y:892
		{
			yyVAL.stmt = &ast.Raise{StmtBase: ast.StmtBase{Pos: yyVAL.pos}, Exc: yyDollar[2].expr}
		}
	case 119:
		yyDollar = yyS[yypt-4 : yypt+1]
//line grammar.y:896
		{
			yyVAL.stmt = &ast.Raise{StmtBase: ast.StmtBase{Pos: yyVAL.pos}, Exc: yyDollar[2].expr, Cause: yyDollar[4].expr}
		}
	case 120:
		yyDollar = yyS[yypt-1 : yypt+1]
//line grammar.y:902
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 121:
		yyDollar = yyS[yypt-1 : yypt+1]
//line grammar.y:906
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 122:
		yyDollar = yyS[yypt-2 : yypt+1]
//line grammar.y:912
		{
			yyVAL.stmt = &ast.Import{StmtBase: ast.StmtBase{Pos: yyVAL.pos}, Names: yyDollar[2].aliases}
		}
	case 123:
		yyDollar = yyS[yypt-1 : yypt+1]
//line grammar.y:919
		{
			yyVAL.level = 1
		}
	case 124:
		yyDollar = yyS[yypt-1 : yypt+1]
//line grammar.y:923
		{
			yyVAL.level = 3
		}
	case 125:
		yyDollar = yyS[yypt-1 : yypt+1]
//line grammar.y:929
		{
			yyVAL.level = yyDollar[1].level
		}
	case 126:
		yyDollar = yyS[yypt-2 : yypt+1]
//line grammar.y:933
		{
			yyVAL.level += yyDollar[2].level
		}
	case 127:
		yyDollar = yyS[yypt-1 : yypt+1]
//line grammar.y:939
		{
			yyVAL.level = 0
			yyVAL.str = yyDollar[1].str
		}
	case 128:
		yyDollar = yyS[yypt-2 : yypt+1]
//line grammar.y:944
		{
			yyVAL.level = yyDollar[1].level
			yyVAL.str = yyDollar[2].str
		}
	case 129:
		yyDollar = yyS[yypt-1 : yypt+1]
//line grammar.y:949
		{
			yyVAL.level = yyDollar[1].level
			yyVAL.str = ""
		}
	case 130:
		yyDollar = yyS[yypt-1 : yypt+1]
//line grammar.y:956
		{
			yyVAL.aliases = []*ast.Alias{&ast.Alias{Pos: yyVAL.pos, Name: ast.Identifier("*")}}
		}
	case 131:
		yyDollar = yyS[yypt-4 : yypt+1]
//line grammar.y:960
		{
			yyVAL.aliases = yyDollar[2].aliases
		}
	case 132:
		yyDollar = yyS[yypt-2 : yypt+1]
//line grammar.y:964
		{
			yyVAL.aliases = yyDollar[1].aliases
		}
	case 133:
		yyDollar = yyS[yypt-4 : yypt+1]
//line grammar.y:970
		{
			yyVAL.stmt = &ast.ImportFrom{StmtBase: ast.StmtBase{Pos: yyVAL.pos}, Module: ast.Identifier(yyDollar[2].str), Names: yyDollar[4].aliases, Level: yyDollar[2].level}
		}
	case 134:
		yyDollar = yyS[yypt-1 : yypt+1]
//line grammar.y:976
		{
			yyVAL.alias = &ast.Alias{Pos: yyVAL.pos, Name: ast.Identifier(yyDollar[1].str)}
		}
	case 135:
		yyDollar = yyS[yypt-3 : yypt+1]
//line grammar.y:980
		{
			yyVAL.alias = &ast.Alias{Pos: yyVAL.pos, Name: ast.Identifier(yyDollar[1].str), AsName: ast.Identifier(yyDollar[3].str)}
		}
	case 136:
		yyDollar = yyS[yypt-1 : yypt+1]
//line grammar.y:986
		{
			yyVAL.alias = &ast.Alias{Pos: yyVAL.pos, Name: ast.Identifier(yyDollar[1].str)}
		}
	case 137:
		yyDollar = yyS[yypt-3 : yypt+1]
//line grammar.y:990
		{
			yyVAL.alias = &ast.Alias{Pos: yyVAL.pos, Name: ast.Identifier(yyDollar[1].str), AsName: ast.Identifier(yyDollar[3].str)}
		}
	case 138:
		yyDollar = yyS[yypt-1 : yypt+1]
//line grammar.y:996
		{
			yyVAL.aliases = nil
			yyVAL.aliases = append(yyVAL.aliases, yyDollar[1].alias)
		}
	case 139:
		yyDollar = yyS[yypt-3 : yypt+1]
//line grammar.y:1001
		{
			yyVAL.aliases = append(yyVAL.aliases, yyDollar[3].alias)
		}
	case 140:
		yyDollar = yyS[yypt-1 : yypt+1]
//line grammar.y:1007
		{
			yyVAL.aliases = nil
			yyVAL.aliases = append(yyVAL.aliases, yyDollar[1].alias)
		}
	case 141:
		yyDollar = yyS[yypt-3 : yypt+1]
//line grammar.y:1012
		{
			yyVAL.aliases = append(yyVAL.aliases, yyDollar[3].alias)
		}
	case 142:
		yyDollar = yyS[yypt-1 : yypt+1]
//line grammar.y:1018
		{
			yyVAL.str = yyDollar[1].str
		}
	case 143:
		yyDollar = yyS[yypt-3 : yypt+1]
//line grammar.y:1022
		{
			yyVAL.str += "." + yyDollar[3].str
		}
	case 144:
		yyDollar = yyS[yypt-1 : yypt+1]
//line grammar.y:1028
		{
			yyVAL.identifiers = nil
			yyVAL.identifiers = append(yyVAL.identifiers, ast.Identifier(yyDollar[1].str))
		}
	case 145:
		yyDollar = yyS[yypt-3 : yypt+1]
//line grammar.y:1033
		{
			yyVAL.identifiers = append(yyVAL.identifiers, ast.Identifier(yyDollar[3].str))
		}
	case 146:
		yyDollar = yyS[yypt-2 : yypt+1]
//line grammar.y:1039
		{
			yyVAL.stmt = &ast.Global{StmtBase: ast.StmtBase{Pos: yyVAL.pos}, Names: yyDollar[2].identifiers}
		}
	case 147:
		yyDollar = yyS[yypt-2 : yypt+1]
//line grammar.y:1045
		{
			yyVAL.stmt = &ast.Nonlocal{StmtBase: ast.StmtBase{Pos: yyVAL.pos}, Names: yyDollar[2].identifiers}
		}
	case 148:
		yyDollar = yyS[yypt-1 : yypt+1]
//line grammar.y:1051
		{
			yyVAL.exprs = nil
			yyVAL.exprs = append(yyVAL.exprs, yyDollar[1].expr)
		}
	case 149:
		yyDollar = yyS[yypt-3 : yypt+1]
//line grammar.y:1056
		{
			yyVAL.exprs = append(yyVAL.exprs, yyDollar[3].expr)
		}
	case 150:
		yyDollar = yyS[yypt-2 : yypt+1]
//line grammar.y:1062
		{
			yyVAL.stmt = &ast.Assert{StmtBase: ast.StmtBase{Pos: yyVAL.pos}, Test: yyDollar[2].expr}
		}
	case 151:
		yyDollar = yyS[yypt-4 : yypt+1]
//line grammar.y:1066
		{
			yyVAL.stmt = &ast.Assert{StmtBase: ast.StmtBase{Pos: yyVAL.pos}, Test: yyDollar[2].expr, Msg: yyDollar[4].expr}
		}
	case 152:
		yyDollar = yyS[yypt-1 : yypt+1]
//line grammar.y:1072
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 153:
		yyDollar = yyS[yypt-1 : yypt+1]
//line grammar.y:1076
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 154:
		yyDollar = yyS[yypt-1 : yypt+1]
//line grammar.y:1080
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 155:
		yyDollar = yyS[yypt-1 : yypt+1]
//line grammar.y:1084
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 156:
		yyDollar = yyS[yypt-1 : yypt+1]
//line grammar.y:1088
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 157:
		yyDollar = yyS[yypt-1 : yypt+1]
//line grammar.y:1092
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 158:
		yyDollar = yyS[yypt-1 : yypt+1]
//line grammar.y:1096
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 159:
		yyDollar = yyS[yypt-1 : yypt+1]
//line grammar.y:1100
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 160:
		yyDollar = yyS[yypt-1 : yypt+1]
//line grammar.y:1104
		{
			yyVAL.stmt = yyDollar[1].stmt
		}
	case 161:
		yyDollar = yyS[yypt-0 : yypt+1]
//line grammar.y:1109
		{
			yyVAL.ifstmt = nil
			yyVAL.lastif = nil
		}
	case 162:
		yyDollar = yyS[yypt-5 : yypt+1]
//line grammar.y:1114
		{
			elifs := yyVAL.ifstmt
			newif := &ast.If{StmtBase: ast.StmtBase{Pos: yyVAL.pos}, Test: yyDollar[3].expr, Body: yyDollar[5].stmts}
			if elifs == nil {
				yyVAL.ifstmt = newif
			} else {
				yyVAL.lastif.Orelse = []ast.Stmt{newif}
			}
			yyVAL.lastif = newif
		}
	case 163:
		yyDollar = yyS[yypt-0 : yypt+1]
//line grammar.y:1126
		{
			yyVAL.stmts = nil
		}
	case 164:
		yyDollar = yyS[yypt-3 : yypt+1]
//line grammar.y:1130
		{
			yyVAL.stmts = yyDollar[3].stmts
		}
	case 165:
		yyDollar = yyS[yypt-7 : yypt+1]
//line grammar.y:1136
		{
			yyVAL.stmt = &ast.Match{StmtBase: ast.StmtBase{Pos: yyVAL.pos}, ContextExpr: yyDollar[2].expr, Body: yyDollar[6].matchclauses}
		}
	case 166:
		yyDollar = yyS[yypt-1 : yypt+1]
//line grammar.y:1142
		{
			yyVAL.matchclauses = nil
			if yyDollar[1].matchclause != nil {
				yyVAL.matchclauses = append(yyVAL.matchclauses, yyDollar[1].matchclause)
			}
		}
	case 167:
		yyDollar = yyS[yypt-2 : yypt+1]
//line grammar.y:1149
		{
			if yyDollar[2].matchclause != nil {
				yyVAL.matchclauses = append(yyVAL.matchclauses, yyDollar[2].matchclause)
			}
		}
	case 168:
		yyDollar = yyS[yypt-7 : yypt+1]
//line grammar.y:1157
		{
			yyVAL.matchclause = &ast.MatchClause{
				Pos:  yyVAL.pos,
				Test: yyDollar[2].expr,
				Body: yyDollar[6].stmts,
			}
		}
	case 169:
		yyDollar = yyS[yypt-2 : yypt+1]
//line grammar.y:1166
		{
			yyVAL.matchclause = nil
		}
	case 170:
		yyDollar = yyS[yypt-6 : yypt+1]
//line grammar.y:1172
		{
			newif := &ast.If{StmtBase: ast.StmtBase{Pos: yyVAL.pos}, Test: yyDollar[2].expr, Body: yyDollar[4].stmts}
			yyVAL.stmt = newif
			elifs := yyDollar[5].ifstmt
			optional_else := yyDollar[6].stmts
			if len(optional_else) != 0 {
				if elifs != nil {
					yyDollar[5].lastif.Orelse = optional_else
					newif.Orelse = []ast.Stmt{elifs}
				} else {
					newif.Orelse = optional_else
				}
			} else {
				if elifs != nil {
					newif.Orelse = []ast.Stmt{elifs}
				}
			}
		}
	case 171:
		yyDollar = yyS[yypt-5 : yypt+1]
//line grammar.y:1193
		{
			yyVAL.stmt = &ast.While{StmtBase: ast.StmtBase{Pos: yyVAL.pos}, Test: yyDollar[2].expr, Body: yyDollar[4].stmts, Orelse: yyDollar[5].stmts}
		}
	case 172:
		yyDollar = yyS[yypt-7 : yypt+1]
//line grammar.y:1199
		{
			target := tupleOrExpr(yyVAL.pos, yyDollar[2].exprs, false)
			setCtx(yylex, target, ast.Store)
			yyVAL.stmt = &ast.For{StmtBase: ast.StmtBase{Pos: yyVAL.pos}, Target: target, Iter: yyDollar[4].expr, Body: yyDollar[6].stmts, Orelse: yyDollar[7].stmts}
		}
	case 173:
		yyDollar = yyS[yypt-0 : yypt+1]
//line grammar.y:1206
		{
			yyVAL.exchandlers = nil
		}
	case 174:
		yyDollar = yyS[yypt-4 : yypt+1]
//line grammar.y:1210
		{
			exc := &ast.ExceptHandler{Pos: yyVAL.pos, ExprType: yyDollar[2].expr, Name: ast.Identifier(yyDollar[2].str), Body: yyDollar[4].stmts}
			yyVAL.exchandlers = append(yyVAL.exchandlers, exc)
		}
	case 175:
		yyDollar = yyS[yypt-4 : yypt+1]
//line grammar.y:1217
		{
			yyVAL.stmt = &ast.Try{StmtBase: ast.StmtBase{Pos: yyVAL.pos}, Body: yyDollar[3].stmts, Handlers: yyDollar[4].exchandlers}
		}
	case 176:
		yyDollar = yyS[yypt-7 : yypt+1]
//line grammar.y:1221
		{
			yyVAL.stmt = &ast.Try{StmtBase: ast.StmtBase{Pos: yyVAL.pos}, Body: yyDollar[3].stmts, Handlers: yyDollar[4].exchandlers, Orelse: yyDollar[7].stmts}
		}
	case 177:
		yyDollar = yyS[yypt-7 : yypt+1]
//line grammar.y:1225
		{
			yyVAL.stmt = &ast.Try{StmtBase: ast.StmtBase{Pos: yyVAL.pos}, Body: yyDollar[3].stmts, Handlers: yyDollar[4].exchandlers, Finalbody: yyDollar[7].stmts}
		}
	case 178:
		yyDollar = yyS[yypt-10 : yypt+1]
//line grammar.y:1229
		{
			yyVAL.stmt = &ast.Try{StmtBase: ast.StmtBase{Pos: yyVAL.pos}, Body: yyDollar[3].stmts, Handlers: yyDollar[4].exchandlers, Orelse: yyDollar[7].stmts, Finalbody: yyDollar[10].stmts}
		}
	case 179:
		yyDollar = yyS[yypt-1 : yypt+1]
//line grammar.y:1235
		{
			yyVAL.withitems = nil
			yyVAL.withitems = append(yyVAL.withitems, yyDollar[1].withitem)
		}
	case 180:
		yyDollar = yyS[yypt-3 : yypt+1]
//line grammar.y:1240
		{
			yyVAL.withitems = append(yyVAL.withitems, yyDollar[3].withitem)
		}
	case 181:
		yyDollar = yyS[yypt-4 : yypt+1]
//line grammar.y:1246
		{
			yyVAL.stmt = &ast.With{StmtBase: ast.StmtBase{Pos: yyVAL.pos}, Items: yyDollar[2].withitems, Body: yyDollar[4].stmts}
		}
	case 182:
		yyDollar = yyS[yypt-1 : yypt+1]
//line grammar.y:1252
		{
			yyVAL.withitem = &ast.WithItem{Pos: yyVAL.pos, ContextExpr: yyDollar[1].expr}
		}
	case 183:
		yyDollar = yyS[yypt-3 : yypt+1]
//line grammar.y:1256
		{
			v := yyDollar[3].expr
			setCtx(yylex, v, ast.Store)
			yyVAL.withitem = &ast.WithItem{Pos: yyVAL.pos, ContextExpr: yyDollar[1].expr, OptionalVars: v}
		}
	case 184:
		yyDollar = yyS[yypt-1 : yypt+1]
//line grammar.y:1265
		{
			yyVAL.expr = nil
			yyVAL.str = ""
		}
	case 185:
		yyDollar = yyS[yypt-2 : yypt+1]
//line grammar.y:1270
		{
			yyVAL.expr = yyDollar[2].expr
			yyVAL.str = ""
		}
	case 186:
		yyDollar = yyS[yypt-4 : yypt+1]
//line grammar.y:1275
		{
			yyVAL.expr = yyDollar[2].expr
			yyVAL.str = yyDollar[4].str
		}
	case 187:
		yyDollar = yyS[yypt-1 : yypt+1]
//line grammar.y:1282
		{
			yyVAL.stmts = nil
			yyVAL.stmts = append(yyVAL.stmts, yyDollar[1].stmts...)
		}
	case 188:
		yyDollar = yyS[yypt-2 : yypt+1]
//line grammar.y:1287
		{
			yyVAL.stmts = append(yyVAL.stmts, yyDollar[2].stmts...)
		}
	case 189:
		yyDollar = yyS[yypt-1 : yypt+1]
//line grammar.y:1293
		{
			yyVAL.stmts = yyDollar[1].stmts
		}
	case 190:
		yyDollar = yyS[yypt-4 : yypt+1]
//line grammar.y:1297
		{
			yyVAL.stmts = yyDollar[3].stmts
		}
	case 191:
		yyDollar = yyS[yypt-1 : yypt+1]
//line grammar.y:1303
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 192:
		yyDollar = yyS[yypt-5 : yypt+1]
//line grammar.y:1307
		{
			yyVAL.expr = &ast.IfExp{ExprBase: ast.ExprBase{Pos: yyVAL.pos}, Test: yyDollar[3].expr, Body: yyDollar[1].expr, Orelse: yyDollar[5].expr}
		}
	case 193:
		yyDollar = yyS[yypt-1 : yypt+1]
//line grammar.y:1311
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 194:
		yyDollar = yyS[yypt-1 : yypt+1]
//line grammar.y:1317
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 195:
		yyDollar = yyS[yypt-1 : yypt+1]
//line grammar.y:1321
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 196:
		yyDollar = yyS[yypt-3 : yypt+1]
//line grammar.y:1327
		{
			args := &ast.Arguments{Pos: yyVAL.pos}
			yyVAL.expr = &ast.Lambda{ExprBase: ast.ExprBase{Pos: yyVAL.pos}, Args: args, Body: yyDollar[3].expr}
		}
	case 197:
		yyDollar = yyS[yypt-4 : yypt+1]
//line grammar.y:1332
		{
			yyVAL.expr = &ast.Lambda{ExprBase: ast.ExprBase{Pos: yyVAL.pos}, Args: yyDollar[2].arguments, Body: yyDollar[4].expr}
		}
	case 198:
		yyDollar = yyS[yypt-3 : yypt+1]
//line grammar.y:1338
		{
			args := &ast.Arguments{Pos: yyVAL.pos}
			yyVAL.expr = &ast.Lambda{ExprBase: ast.ExprBase{Pos: yyVAL.pos}, Args: args, Body: yyDollar[3].expr}
		}
	case 199:
		yyDollar = yyS[yypt-4 : yypt+1]
//line grammar.y:1343
		{
			yyVAL.expr = &ast.Lambda{ExprBase: ast.ExprBase{Pos: yyVAL.pos}, Args: yyDollar[2].arguments, Body: yyDollar[4].expr}
		}
	case 200:
		yyDollar = yyS[yypt-1 : yypt+1]
//line grammar.y:1349
		{
			yyVAL.expr = yyDollar[1].expr
			yyVAL.isExpr = true
		}
	case 201:
		yyDollar = yyS[yypt-3 : yypt+1]
//line grammar.y:1354
		{
			if !yyDollar[1].isExpr {
				boolop := yyVAL.expr.(*ast.BoolOp)
				boolop.Values = append(boolop.Values, yyDollar[3].expr)
			} else {
				yyVAL.expr = &ast.BoolOp{ExprBase: ast.ExprBase{Pos: yyVAL.pos}, Op: ast.Or, Values: []ast.Expr{yyVAL.expr, yyDollar[3].expr}}
			}
			yyVAL.isExpr = false
		}
	case 202:
		yyDollar = yyS[yypt-1 : yypt+1]
//line grammar.y:1366
		{
			yyVAL.expr = yyDollar[1].expr
			yyVAL.isExpr = true
		}
	case 203:
		yyDollar = yyS[yypt-3 : yypt+1]
//line grammar.y:1371
		{
			if !yyDollar[1].isExpr {
				boolop := yyVAL.expr.(*ast.BoolOp)
				boolop.Values = append(boolop.Values, yyDollar[3].expr)
			} else {
				yyVAL.expr = &ast.BoolOp{ExprBase: ast.ExprBase{Pos: yyVAL.pos}, Op: ast.And, Values: []ast.Expr{yyVAL.expr, yyDollar[3].expr}}
			}
			yyVAL.isExpr = false
		}
	case 204:
		yyDollar = yyS[yypt-2 : yypt+1]
//line grammar.y:1383
		{
			yyVAL.expr = &ast.UnaryOp{ExprBase: ast.ExprBase{Pos: yyVAL.pos}, Op: ast.Not, Operand: yyDollar[2].expr}
		}
	case 205:
		yyDollar = yyS[yypt-1 : yypt+1]
//line grammar.y:1387
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 206:
		yyDollar = yyS[yypt-1 : yypt+1]
//line grammar.y:1393
		{
			yyVAL.expr = yyDollar[1].expr
			yyVAL.isExpr = true
		}
	case 207:
		yyDollar = yyS[yypt-3 : yypt+1]
//line grammar.y:1398
		{
			if !yyDollar[1].isExpr {
				comp := yyVAL.expr.(*ast.Compare)
				comp.Ops = append(comp.Ops, yyDollar[2].cmpop)
				comp.Comparators = append(comp.Comparators, yyDollar[3].expr)
			} else {
				yyVAL.expr = &ast.Compare{ExprBase: ast.ExprBase{Pos: yyVAL.pos}, Left: yyVAL.expr, Ops: []ast.CmpOp{yyDollar[2].cmpop}, Comparators: []ast.Expr{yyDollar[3].expr}}
			}
			yyVAL.isExpr = false
		}
	case 208:
		yyDollar = yyS[yypt-1 : yypt+1]
//line grammar.y:1413
		{
			yyVAL.cmpop = ast.Lt
		}
	case 209:
		yyDollar = yyS[yypt-1 : yypt+1]
//line grammar.y:1417
		{
			yyVAL.cmpop = ast.Gt
		}
	case 210:
		yyDollar = yyS[yypt-1 : yypt+1]
//line grammar.y:1421
		{
			yyVAL.cmpop = ast.Eq
		}
	case 211:
		yyDollar = yyS[yypt-1 : yypt+1]
//line grammar.y:1425
		{
			yyVAL.cmpop = ast.GtE
		}
	case 212:
		yyDollar = yyS[yypt-1 : yypt+1]
//line grammar.y:1429
		{
			yyVAL.cmpop = ast.LtE
		}
	case 213:
		yyDollar = yyS[yypt-1 : yypt+1]
//line grammar.y:1433
		{
			yylex.(*yyLex).SyntaxError("invalid syntax")
		}
	case 214:
		yyDollar = yyS[yypt-1 : yypt+1]
//line grammar.y:1437
		{
			yyVAL.cmpop = ast.NotEq
		}
	case 215:
		yyDollar = yyS[yypt-1 : yypt+1]
//line grammar.y:1441
		{
			yyVAL.cmpop = ast.In
		}
	case 216:
		yyDollar = yyS[yypt-2 : yypt+1]
//line grammar.y:1445
		{
			yyVAL.cmpop = ast.NotIn
		}
	case 217:
		yyDollar = yyS[yypt-1 : yypt+1]
//line grammar.y:1449
		{
			yyVAL.cmpop = ast.Is
		}
	case 218:
		yyDollar = yyS[yypt-2 : yypt+1]
//line grammar.y:1453
		{
			yyVAL.cmpop = ast.IsNot
		}
	case 219:
		yyDollar = yyS[yypt-2 : yypt+1]
//line grammar.y:1459
		{
			yyVAL.expr = &ast.Starred{ExprBase: ast.ExprBase{Pos: yyVAL.pos}, Value: yyDollar[2].expr, Ctx: ast.Load}
		}
	case 220:
		yyDollar = yyS[yypt-1 : yypt+1]
//line grammar.y:1465
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 221:
		yyDollar = yyS[yypt-3 : yypt+1]
//line grammar.y:1469
		{
			yyVAL.expr = &ast.BinOp{ExprBase: ast.ExprBase{Pos: yyVAL.pos}, Left: yyDollar[1].expr, Op: ast.BitOr, Right: yyDollar[3].expr}
		}
	case 222:
		yyDollar = yyS[yypt-1 : yypt+1]
//line grammar.y:1475
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 223:
		yyDollar = yyS[yypt-3 : yypt+1]
//line grammar.y:1479
		{
			yyVAL.expr = &ast.BinOp{ExprBase: ast.ExprBase{Pos: yyVAL.pos}, Left: yyDollar[1].expr, Op: ast.BitXor, Right: yyDollar[3].expr}
		}
	case 224:
		yyDollar = yyS[yypt-1 : yypt+1]
//line grammar.y:1485
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 225:
		yyDollar = yyS[yypt-3 : yypt+1]
//line grammar.y:1489
		{
			yyVAL.expr = &ast.BinOp{ExprBase: ast.ExprBase{Pos: yyVAL.pos}, Left: yyDollar[1].expr, Op: ast.BitAnd, Right: yyDollar[3].expr}
		}
	case 226:
		yyDollar = yyS[yypt-1 : yypt+1]
//line grammar.y:1495
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 227:
		yyDollar = yyS[yypt-3 : yypt+1]
//line grammar.y:1499
		{
			yyVAL.expr = &ast.BinOp{ExprBase: ast.ExprBase{Pos: yyVAL.pos}, Left: yyDollar[1].expr, Op: ast.LShift, Right: yyDollar[3].expr}
		}
	case 228:
		yyDollar = yyS[yypt-3 : yypt+1]
//line grammar.y:1503
		{
			yyVAL.expr = &ast.BinOp{ExprBase: ast.ExprBase{Pos: yyVAL.pos}, Left: yyDollar[1].expr, Op: ast.RShift, Right: yyDollar[3].expr}
		}
	case 229:
		yyDollar = yyS[yypt-1 : yypt+1]
//line grammar.y:1509
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 230:
		yyDollar = yyS[yypt-3 : yypt+1]
//line grammar.y:1513
		{
			yyVAL.expr = &ast.BinOp{ExprBase: ast.ExprBase{Pos: yyVAL.pos}, Left: yyDollar[1].expr, Op: ast.Add, Right: yyDollar[3].expr}
		}
	case 231:
		yyDollar = yyS[yypt-3 : yypt+1]
//line grammar.y:1517
		{
			yyVAL.expr = &ast.BinOp{ExprBase: ast.ExprBase{Pos: yyVAL.pos}, Left: yyDollar[1].expr, Op: ast.Sub, Right: yyDollar[3].expr}
		}
	case 232:
		yyDollar = yyS[yypt-1 : yypt+1]
//line grammar.y:1523
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 233:
		yyDollar = yyS[yypt-3 : yypt+1]
//line grammar.y:1527
		{
			yyVAL.expr = &ast.BinOp{ExprBase: ast.ExprBase{Pos: yyVAL.pos}, Left: yyDollar[1].expr, Op: ast.Mult, Right: yyDollar[3].expr}
		}
	case 234:
		yyDollar = yyS[yypt-3 : yypt+1]
//line grammar.y:1531
		{
			yyVAL.expr = &ast.BinOp{ExprBase: ast.ExprBase{Pos: yyVAL.pos}, Left: yyDollar[1].expr, Op: ast.Div, Right: yyDollar[3].expr}
		}
	case 235:
		yyDollar = yyS[yypt-3 : yypt+1]
//line grammar.y:1535
		{
			yyVAL.expr = &ast.BinOp{ExprBase: ast.ExprBase{Pos: yyVAL.pos}, Left: yyDollar[1].expr, Op: ast.Modulo, Right: yyDollar[3].expr}
		}
	case 236:
		yyDollar = yyS[yypt-3 : yypt+1]
//line grammar.y:1539
		{
			yyVAL.expr = &ast.BinOp{ExprBase: ast.ExprBase{Pos: yyVAL.pos}, Left: yyDollar[1].expr, Op: ast.FloorDiv, Right: yyDollar[3].expr}
		}
	case 237:
		yyDollar = yyS[yypt-2 : yypt+1]
//line grammar.y:1545
		{
			yyVAL.expr = &ast.UnaryOp{ExprBase: ast.ExprBase{Pos: yyVAL.pos}, Op: ast.UAdd, Operand: yyDollar[2].expr}
		}
	case 238:
		yyDollar = yyS[yypt-2 : yypt+1]
//line grammar.y:1549
		{
			yyVAL.expr = &ast.UnaryOp{ExprBase: ast.ExprBase{Pos: yyVAL.pos}, Op: ast.USub, Operand: yyDollar[2].expr}
		}
	case 239:
		yyDollar = yyS[yypt-2 : yypt+1]
//line grammar.y:1553
		{
			yyVAL.expr = &ast.UnaryOp{ExprBase: ast.ExprBase{Pos: yyVAL.pos}, Op: ast.Invert, Operand: yyDollar[2].expr}
		}
	case 240:
		yyDollar = yyS[yypt-1 : yypt+1]
//line grammar.y:1557
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 241:
		yyDollar = yyS[yypt-2 : yypt+1]
//line grammar.y:1563
		{
			yyVAL.expr = applyTrailers(yyDollar[1].expr, yyDollar[2].exprs)
		}
	case 242:
		yyDollar = yyS[yypt-4 : yypt+1]
//line grammar.y:1567
		{
			yyVAL.expr = &ast.BinOp{ExprBase: ast.ExprBase{Pos: yyVAL.pos}, Left: applyTrailers(yyDollar[1].expr, yyDollar[2].exprs), Op: ast.Pow, Right: yyDollar[4].expr}
		}
	case 243:
		yyDollar = yyS[yypt-0 : yypt+1]
//line grammar.y:1573
		{
			yyVAL.exprs = nil
		}
	case 244:
		yyDollar = yyS[yypt-2 : yypt+1]
//line grammar.y:1577
		{
			yyVAL.exprs = append(yyVAL.exprs, yyDollar[2].expr)
		}
	case 245:
		yyDollar = yyS[yypt-1 : yypt+1]
//line grammar.y:1583
		{
			yyVAL.obj = yyDollar[1].obj
		}
	case 246:
		yyDollar = yyS[yypt-2 : yypt+1]
//line grammar.y:1587
		{
			switch a := yyVAL.obj.(type) {
			case py.String:
				switch b := yyDollar[2].obj.(type) {
				case py.String:
					yyVAL.obj = a + b
				default:
					yylex.(*yyLex).SyntaxError("cannot mix string and nonstring literals")
				}
			case py.Bytes:
				switch b := yyDollar[2].obj.(type) {
				case py.Bytes:
					yyVAL.obj = append(a, b...)
				default:
					yylex.(*yyLex).SyntaxError("cannot mix bytes and nonbytes literals")
				}
			}
		}
	case 247:
		yyDollar = yyS[yypt-2 : yypt+1]
//line grammar.y:1608
		{
			yyVAL.expr = &ast.Tuple{ExprBase: ast.ExprBase{Pos: yyVAL.pos}, Ctx: ast.Load}
		}
	case 248:
		yyDollar = yyS[yypt-3 : yypt+1]
//line grammar.y:1612
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 249:
		yyDollar = yyS[yypt-4 : yypt+1]
//line grammar.y:1616
		{
			yyVAL.expr = &ast.GeneratorExp{ExprBase: ast.ExprBase{Pos: yyVAL.pos}, Elt: yyDollar[2].expr, Generators: yyDollar[3].comprehensions}
		}
	case 250:
		yyDollar = yyS[yypt-4 : yypt+1]
//line grammar.y:1620
		{
			yyVAL.expr = tupleOrExpr(yyVAL.pos, yyDollar[2].exprs, yyDollar[3].comma)
		}
	case 251:
		yyDollar = yyS[yypt-2 : yypt+1]
//line grammar.y:1624
		{
			yyVAL.expr = &ast.List{ExprBase: ast.ExprBase{Pos: yyVAL.pos}, Ctx: ast.Load}
		}
	case 252:
		yyDollar = yyS[yypt-4 : yypt+1]
//line grammar.y:1628
		{
			yyVAL.expr = &ast.ListComp{ExprBase: ast.ExprBase{Pos: yyVAL.pos}, Elt: yyDollar[2].expr, Generators: yyDollar[3].comprehensions}
		}
	case 253:
		yyDollar = yyS[yypt-4 : yypt+1]
//line grammar.y:1632
		{
			yyVAL.expr = &ast.List{ExprBase: ast.ExprBase{Pos: yyVAL.pos}, Elts: yyDollar[2].exprs, Ctx: ast.Load}
		}
	case 254:
		yyDollar = yyS[yypt-2 : yypt+1]
//line grammar.y:1636
		{
			yyVAL.expr = &ast.Dict{ExprBase: ast.ExprBase{Pos: yyVAL.pos}}
		}
	case 255:
		yyDollar = yyS[yypt-3 : yypt+1]
//line grammar.y:1640
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 256:
		yyDollar = yyS[yypt-1 : yypt+1]
//line grammar.y:1644
		{
			yyVAL.expr = &ast.Name{ExprBase: ast.ExprBase{Pos: yyVAL.pos}, Id: ast.Identifier(yyDollar[1].str), Ctx: ast.Load}
		}
	case 257:
		yyDollar = yyS[yypt-1 : yypt+1]
//line grammar.y:1648
		{
			yyVAL.expr = &ast.Num{ExprBase: ast.ExprBase{Pos: yyVAL.pos}, N: yyDollar[1].obj}
		}
	case 258:
		yyDollar = yyS[yypt-1 : yypt+1]
//line grammar.y:1652
		{
			switch s := yyDollar[1].obj.(type) {
			case py.String:
				yyVAL.expr = &ast.Str{ExprBase: ast.ExprBase{Pos: yyVAL.pos}, S: s}
			case py.Bytes:
				yyVAL.expr = &ast.Bytes{ExprBase: ast.ExprBase{Pos: yyVAL.pos}, S: s}
			default:
				panic("not Bytes or String in strings")
			}
		}
	case 259:
		yyDollar = yyS[yypt-1 : yypt+1]
//line grammar.y:1663
		{
			yyVAL.expr = &ast.Ellipsis{ExprBase: ast.ExprBase{Pos: yyVAL.pos}}
		}
	case 260:
		yyDollar = yyS[yypt-1 : yypt+1]
//line grammar.y:1667
		{
			yyVAL.expr = &ast.NameConstant{ExprBase: ast.ExprBase{Pos: yyVAL.pos}, Value: py.None}
		}
	case 261:
		yyDollar = yyS[yypt-1 : yypt+1]
//line grammar.y:1671
		{
			yyVAL.expr = &ast.NameConstant{ExprBase: ast.ExprBase{Pos: yyVAL.pos}, Value: py.True}
		}
	case 262:
		yyDollar = yyS[yypt-1 : yypt+1]
//line grammar.y:1675
		{
			yyVAL.expr = &ast.NameConstant{ExprBase: ast.ExprBase{Pos: yyVAL.pos}, Value: py.False}
		}
	case 263:
		yyDollar = yyS[yypt-2 : yypt+1]
//line grammar.y:1682
		{
			yyVAL.expr = &ast.Call{ExprBase: ast.ExprBase{Pos: yyVAL.pos}}
		}
	case 264:
		yyDollar = yyS[yypt-3 : yypt+1]
//line grammar.y:1686
		{
			yyVAL.expr = yyDollar[2].call
		}
	case 265:
		yyDollar = yyS[yypt-3 : yypt+1]
//line grammar.y:1690
		{
			slice := yyDollar[2].slice
			// If all items of a ExtSlice are just Index then return as tuple
			if extslice, ok := slice.(*ast.ExtSlice); ok {
				elts := make([]ast.Expr, len(extslice.Dims))
				for i, item := range extslice.Dims {
					if index, isIndex := item.(*ast.Index); isIndex {
						elts[i] = index.Value
					} else {
						goto notAllIndex
					}
				}
				slice = &ast.Index{SliceBase: extslice.SliceBase, Value: &ast.Tuple{ExprBase: ast.ExprBase{Pos: extslice.SliceBase.Pos}, Elts: elts, Ctx: ast.Load}}
			notAllIndex:
			}
			yyVAL.expr = &ast.Subscript{ExprBase: ast.ExprBase{Pos: yyVAL.pos}, Slice: slice, Ctx: ast.Load}
		}
	case 266:
		yyDollar = yyS[yypt-2 : yypt+1]
//line grammar.y:1708
		{
			yyVAL.expr = &ast.Attribute{ExprBase: ast.ExprBase{Pos: yyVAL.pos}, Attr: ast.Identifier(yyDollar[2].str), Ctx: ast.Load}
		}
	case 267:
		yyDollar = yyS[yypt-1 : yypt+1]
//line grammar.y:1714
		{
			yyVAL.slice = yyDollar[1].slice
			yyVAL.isExpr = true
		}
	case 268:
		yyDollar = yyS[yypt-3 : yypt+1]
//line grammar.y:1719
		{
			if !yyDollar[1].isExpr {
				extSlice := yyVAL.slice.(*ast.ExtSlice)
				extSlice.Dims = append(extSlice.Dims, yyDollar[3].slice)
			} else {
				yyVAL.slice = &ast.ExtSlice{SliceBase: ast.SliceBase{Pos: yyVAL.pos}, Dims: []ast.Slicer{yyDollar[1].slice, yyDollar[3].slice}}
			}
			yyVAL.isExpr = false
		}
	case 269:
		yyDollar = yyS[yypt-2 : yypt+1]
//line grammar.y:1731
		{
			if yyDollar[2].comma && yyDollar[1].isExpr {
				yyVAL.slice = &ast.ExtSlice{SliceBase: ast.SliceBase{Pos: yyVAL.pos}, Dims: []ast.Slicer{yyDollar[1].slice}}
			} else {
				yyVAL.slice = yyDollar[1].slice
			}
		}
	case 270:
		yyDollar = yyS[yypt-1 : yypt+1]
//line grammar.y:1741
		{
			yyVAL.slice = &ast.Index{SliceBase: ast.SliceBase{Pos: yyVAL.pos}, Value: yyDollar[1].expr}
		}
	case 271:
		yyDollar = yyS[yypt-1 : yypt+1]
//line grammar.y:1745
		{
			yyVAL.slice = &ast.Slice{SliceBase: ast.SliceBase{Pos: yyVAL.pos}, Lower: nil, Upper: nil, Step: nil}
		}
	case 272:
		yyDollar = yyS[yypt-2 : yypt+1]
//line grammar.y:1749
		{
			yyVAL.slice = &ast.Slice{SliceBase: ast.SliceBase{Pos: yyVAL.pos}, Lower: nil, Upper: nil, Step: yyDollar[2].expr}
		}
	case 273:
		yyDollar = yyS[yypt-2 : yypt+1]
//line grammar.y:1753
		{
			yyVAL.slice = &ast.Slice{SliceBase: ast.SliceBase{Pos: yyVAL.pos}, Lower: nil, Upper: yyDollar[2].expr, Step: nil}
		}
	case 274:
		yyDollar = yyS[yypt-3 : yypt+1]
//line grammar.y:1757
		{
			yyVAL.slice = &ast.Slice{SliceBase: ast.SliceBase{Pos: yyVAL.pos}, Lower: nil, Upper: yyDollar[2].expr, Step: yyDollar[3].expr}
		}
	case 275:
		yyDollar = yyS[yypt-2 : yypt+1]
//line grammar.y:1761
		{
			yyVAL.slice = &ast.Slice{SliceBase: ast.SliceBase{Pos: yyVAL.pos}, Lower: yyDollar[1].expr, Upper: nil, Step: nil}
		}
	case 276:
		yyDollar = yyS[yypt-3 : yypt+1]
//line grammar.y:1765
		{
			yyVAL.slice = &ast.Slice{SliceBase: ast.SliceBase{Pos: yyVAL.pos}, Lower: yyDollar[1].expr, Upper: nil, Step: yyDollar[3].expr}
		}
	case 277:
		yyDollar = yyS[yypt-3 : yypt+1]
//line grammar.y:1769
		{
			yyVAL.slice = &ast.Slice{SliceBase: ast.SliceBase{Pos: yyVAL.pos}, Lower: yyDollar[1].expr, Upper: yyDollar[3].expr, Step: nil}
		}
	case 278:
		yyDollar = yyS[yypt-4 : yypt+1]
//line grammar.y:1773
		{
			yyVAL.slice = &ast.Slice{SliceBase: ast.SliceBase{Pos: yyVAL.pos}, Lower: yyDollar[1].expr, Upper: yyDollar[3].expr, Step: yyDollar[4].expr}
		}
	case 279:
		yyDollar = yyS[yypt-1 : yypt+1]
//line grammar.y:1779
		{
			yyVAL.expr = nil
		}
	case 280:
		yyDollar = yyS[yypt-2 : yypt+1]
//line grammar.y:1783
		{
			yyVAL.expr = yyDollar[2].expr
		}
	case 281:
		yyDollar = yyS[yypt-1 : yypt+1]
//line grammar.y:1789
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 282:
		yyDollar = yyS[yypt-1 : yypt+1]
//line grammar.y:1793
		{
			yyVAL.expr = yyDollar[1].expr
		}
	case 283:
		yyDollar = yyS[yypt-1 : yypt+1]
//line grammar.y:1799
		{
			yyVAL.exprs = nil
			yyVAL.exprs = append(yyVAL.exprs, yyDollar[1].expr)
		}
	case 284:
		yyDollar = yyS[yypt-3 : yypt+1]
//line grammar.y:1804
		{
			yyVAL.exprs = append(yyVAL.exprs, yyDollar[3].expr)
		}
	case 285:
		yyDollar = yyS[yypt-2 : yypt+1]
//line grammar.y:1810
		{
			yyVAL.exprs = yyDollar[1].exprs
			yyVAL.comma = yyDollar[2].comma
		}
	case 286:
		yyDollar = yyS[yypt-2 : yypt+1]
//line grammar.y:1817
		{
			elts := yyDollar[1].exprs
			if yyDollar[2].comma || len(elts) > 1 {
				yyVAL.expr = &ast.Tuple{ExprBase: ast.ExprBase{Pos: yyVAL.pos}, Elts: elts, Ctx: ast.Load}
			} else {
				yyVAL.expr = elts[0]
			}
		}
	case 287:
		yyDollar = yyS[yypt-2 : yypt+1]
//line grammar.y:1828
		{
			yyVAL.exprs = yyDollar[1].exprs
		}
	case 288:
		yyDollar = yyS[yypt-3 : yypt+1]
//line grammar.y:1835
		{
			yyVAL.exprs = nil
			yyVAL.exprs = append(yyVAL.exprs, yyDollar[1].expr, yyDollar[3].expr) // key, value order
		}
	case 289:
		yyDollar = yyS[yypt-5 : yypt+1]
//line grammar.y:1840
		{
			yyVAL.exprs = append(yyVAL.exprs, yyDollar[3].expr, yyDollar[5].expr)
		}
	case 290:
		yyDollar = yyS[yypt-2 : yypt+1]
//line grammar.y:1846
		{
			keyValues := yyDollar[1].exprs
			d := &ast.Dict{ExprBase: ast.ExprBase{Pos: yyVAL.pos}, Keys: nil, Values: nil}
			for i := 0; i < len(keyValues)-1; i += 2 {
				d.Keys = append(d.Keys, keyValues[i])
				d.Values = append(d.Values, keyValues[i+1])
			}
			yyVAL.expr = d
		}
	case 291:
		yyDollar = yyS[yypt-4 : yypt+1]
//line grammar.y:1856
		{
			yyVAL.expr = &ast.DictComp{ExprBase: ast.ExprBase{Pos: yyVAL.pos}, Key: yyDollar[1].expr, Value: yyDollar[3].expr, Generators: yyDollar[4].comprehensions}
		}
	case 292:
		yyDollar = yyS[yypt-1 : yypt+1]
//line grammar.y:1860
		{
			yyVAL.expr = &ast.Set{ExprBase: ast.ExprBase{Pos: yyVAL.pos}, Elts: yyDollar[1].exprs}
		}
	case 293:
		yyDollar = yyS[yypt-2 : yypt+1]
//line grammar.y:1864
		{
			yyVAL.expr = &ast.SetComp{ExprBase: ast.ExprBase{Pos: yyVAL.pos}, Elt: yyDollar[1].expr, Generators: yyDollar[2].comprehensions}
		}
	case 294:
		yyDollar = yyS[yypt-5 : yypt+1]
//line grammar.y:1870
		{
			classDef := &ast.ClassDef{StmtBase: ast.StmtBase{Pos: yyVAL.pos}, Name: ast.Identifier(yyDollar[2].str), Body: yyDollar[5].stmts}
			yyVAL.stmt = classDef
			args := yyDollar[3].call
			if args != nil {
				classDef.Bases = args.Args
				classDef.Keywords = args.Keywords
				classDef.Starargs = args.Starargs
				classDef.Kwargs = args.Kwargs
			}
		}
	case 295:
		yyDollar = yyS[yypt-1 : yypt+1]
//line grammar.y:1884
		{
			yyVAL.call = yyDollar[1].call
		}
	case 296:
		yyDollar = yyS[yypt-3 : yypt+1]
//line grammar.y:1888
		{
			yyVAL.call.Args = append(yyVAL.call.Args, yyDollar[3].call.Args...)
			yyVAL.call.Keywords = append(yyVAL.call.Keywords, yyDollar[3].call.Keywords...)
		}
	case 297:
		yyDollar = yyS[yypt-0 : yypt+1]
//line grammar.y:1894
		{
			yyVAL.call = &ast.Call{}
		}
	case 298:
		yyDollar = yyS[yypt-2 : yypt+1]
//line grammar.y:1898
		{
			yyVAL.call = yyDollar[1].call
		}
	case 299:
		yyDollar = yyS[yypt-0 : yypt+1]
//line grammar.y:1903
		{
			yyVAL.call = &ast.Call{}
		}
	case 300:
		yyDollar = yyS[yypt-3 : yypt+1]
//line grammar.y:1907
		{
			yyVAL.call.Args = append(yyVAL.call.Args, yyDollar[3].call.Args...)
			yyVAL.call.Keywords = append(yyVAL.call.Keywords, yyDollar[3].call.Keywords...)
		}
	case 301:
		yyDollar = yyS[yypt-2 : yypt+1]
//line grammar.y:1914
		{
			yyVAL.call = yyDollar[1].call
		}
	case 302:
		yyDollar = yyS[yypt-4 : yypt+1]
//line grammar.y:1918
		{
			call := yyDollar[1].call
			call.Starargs = yyDollar[3].expr
			if len(yyDollar[4].call.Args) != 0 {
				yylex.(*yyLex).SyntaxError("only named arguments may follow *expression")
			}
			call.Keywords = append(call.Keywords, yyDollar[4].call.Keywords...)
			yyVAL.call = call
		}
	case 303:
		yyDollar = yyS[yypt-7 : yypt+1]
//line grammar.y:1928
		{
			call := yyDollar[1].call
			call.Starargs = yyDollar[3].expr
			call.Kwargs = yyDollar[7].expr
			if len(yyDollar[4].call.Args) != 0 {
				yylex.(*yyLex).SyntaxError("only named arguments may follow *expression")
			}
			call.Keywords = append(call.Keywords, yyDollar[4].call.Keywords...)
			yyVAL.call = call
		}
	case 304:
		yyDollar = yyS[yypt-3 : yypt+1]
//line grammar.y:1939
		{
			call := yyDollar[1].call
			call.Kwargs = yyDollar[3].expr
			yyVAL.call = call
		}
	case 305:
		yyDollar = yyS[yypt-1 : yypt+1]
//line grammar.y:1949
		{
			yyVAL.call = &ast.Call{}
			yyVAL.call.Args = []ast.Expr{yyDollar[1].expr}
		}
	case 306:
		yyDollar = yyS[yypt-2 : yypt+1]
//line grammar.y:1954
		{
			yyVAL.call = &ast.Call{}
			yyVAL.call.Args = []ast.Expr{
				&ast.GeneratorExp{ExprBase: ast.ExprBase{Pos: yyVAL.pos}, Elt: yyDollar[1].expr, Generators: yyDollar[2].comprehensions},
			}
		}
	case 307:
		yyDollar = yyS[yypt-3 : yypt+1]
//line grammar.y:1961
		{
			yyVAL.call = &ast.Call{}
			test := yyDollar[1].expr
			if name, ok := test.(*ast.Name); ok {
				yyVAL.call.Keywords = []*ast.Keyword{&ast.Keyword{Pos: name.Pos, Arg: name.Id, Value: yyDollar[3].expr}}
			} else {
				yylex.(*yyLex).SyntaxError("keyword can't be an expression")
			}
		}
	case 308:
		yyDollar = yyS[yypt-1 : yypt+1]
//line grammar.y:1973
		{
			yyVAL.comprehensions = yyDollar[1].comprehensions
			yyVAL.exprs = nil
		}
	case 309:
		yyDollar = yyS[yypt-1 : yypt+1]
//line grammar.y:1978
		{
			yyVAL.comprehensions = yyDollar[1].comprehensions
			yyVAL.exprs = yyDollar[1].exprs
		}
	case 310:
		yyDollar = yyS[yypt-4 : yypt+1]
//line grammar.y:1985
		{
			c := ast.Comprehension{
				Target: tupleOrExpr(yyVAL.pos, yyDollar[2].exprs, yyDollar[2].comma),
				Iter:   yyDollar[4].expr,
			}
			setCtx(yylex, c.Target, ast.Store)
			yyVAL.comprehensions = []ast.Comprehension{c}
		}
	case 311:
		yyDollar = yyS[yypt-5 : yypt+1]
//line grammar.y:1994
		{
			c := ast.Comprehension{
				Target: tupleOrExpr(yyVAL.pos, yyDollar[2].exprs, yyDollar[2].comma),
				Iter:   yyDollar[4].expr,
				Ifs:    yyDollar[5].exprs,
			}
			setCtx(yylex, c.Target, ast.Store)
			yyVAL.comprehensions = []ast.Comprehension{c}
			yyVAL.comprehensions = append(yyVAL.comprehensions, yyDollar[5].comprehensions...)
		}
	case 312:
		yyDollar = yyS[yypt-2 : yypt+1]
//line grammar.y:2007
		{
			yyVAL.exprs = []ast.Expr{yyDollar[2].expr}
			yyVAL.comprehensions = nil
		}
	case 313:
		yyDollar = yyS[yypt-3 : yypt+1]
//line grammar.y:2012
		{
			yyVAL.exprs = []ast.Expr{yyDollar[2].expr}
			yyVAL.exprs = append(yyVAL.exprs, yyDollar[3].exprs...)
			yyVAL.comprehensions = yyDollar[3].comprehensions
		}
	case 314:
		yyDollar = yyS[yypt-1 : yypt+1]
//line grammar.y:2023
		{
			yyVAL.expr = &ast.Yield{ExprBase: ast.ExprBase{Pos: yyVAL.pos}}
		}
	case 315:
		yyDollar = yyS[yypt-3 : yypt+1]
//line grammar.y:2027
		{
			yyVAL.expr = &ast.YieldFrom{ExprBase: ast.ExprBase{Pos: yyVAL.pos}, Value: yyDollar[3].expr}
		}
	case 316:
		yyDollar = yyS[yypt-2 : yypt+1]
//line grammar.y:2031
		{
			yyVAL.expr = &ast.Yield{ExprBase: ast.ExprBase{Pos: yyVAL.pos}, Value: yyDollar[2].expr}
		}
	}
	goto yystack /* stack new state and value */
}
